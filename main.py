from dotenv import load_dotenv
load_dotenv()

# --- –®–ê–ì 2: –¢–µ–ø–µ—Ä—å –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω–æ–µ ---
import os
import asyncio
import logging
from decimal import Decimal
from functools import wraps
import math

from aiogram import Bot, Dispatcher, types, F
from aiogram.client.default import DefaultBotProperties
from aiogram.filters import CommandStart, Command, CommandObject
from aiogram.filters.callback_data import CallbackData
from aiogram.types import CallbackQuery, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage

from datetime import datetime, timedelta, UTC 
from sqlalchemy import select, update, func, or_
from sqlalchemy.orm import joinedload
from sqlalchemy.ext.asyncio import create_async_engine, async_sessionmaker

from apscheduler.schedulers.asyncio import AsyncIOScheduler

from db_models import (
    Base, User, Transaction, Order, Offer,
    ChatMessage, Review, FinancialTransaction, Setting,
    Category
)
from keyboards import main_menu_keyboard, profile_keyboard # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω –∏–º–ø–æ—Ä—Ç
from crypto_logic import generate_new_wallet, check_new_transactions, create_payout
from states import OrderCreation, MakeOffer, LeaveReview, Withdrawal, AdminBalanceChange, SupportChat

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã
logging.basicConfig(level=logging.INFO)
PAGE_SIZE = 3
# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ ID ---
DB_URL = f"postgresql+asyncpg://{os.getenv('DB_USER')}:{os.getenv('DB_PASS')}@{os.getenv('DB_HOST')}:{os.getenv('DB_PORT')}/{os.getenv('DB_NAME')}"
ADMIN_ID = int(os.getenv("ADMIN_ID"))
LOG_CHANNEL_ID = int(os.getenv("LOG_CHANNEL_ID"))
ORDER_CHANNEL_ID = os.getenv("ORDER_CHANNEL_ID")

engine = create_async_engine(DB_URL)
async_session = async_sessionmaker(engine, expire_on_commit=False)

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ FSM —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –∏ –±–æ—Ç–∞ ---
storage = MemoryStorage()
BOT_TOKEN = os.getenv("BOT_TOKEN")
bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode="HTML"))
dp = Dispatcher(storage=storage)

VIP_PLANS = {
    30: Decimal("5.00"),  # 30 –¥–Ω–µ–π –∑–∞ 5 USDT
    90: Decimal("12.00"), # 90 –¥–Ω–µ–π –∑–∞ 12 USDT
}

# --- –§–∞–±—Ä–∏–∫–∏ –∫–æ–ª–±—ç–∫–æ–≤ ---
class OrderCallback(CallbackData, prefix="order"):
    action: str
    order_id: int
class OfferCallback(CallbackData, prefix="offer"):
    action: str
    offer_id: int
class ReviewCallback(CallbackData, prefix="review"):
    action: str
    order_id: int
    reviewee_id: int
class AdminCallback(CallbackData, prefix="admin"):
    action: str
    user_id: int
class Paginator(CallbackData, prefix="pag"):
    action: str
    page: int
class VIPCallback(CallbackData, prefix="vip"):
    action: str
    days: int
class CategoryCallback(CallbackData, prefix="category"):
    action: str # 'select'
    category_id: int

# --- –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ ---
def admin_only(func):
    @wraps(func)
    async def wrapper(message: types.Message, *args, **kwargs):
        if message.from_user.id != ADMIN_ID:
            return await message.answer("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return await func(message, *args, **kwargs)
    return wrapper


def block_check(func):
    @wraps(func)
    async def wrapper(event: types.TelegramObject, *args, **kwargs):
        user_id = event.from_user.id
        async with async_session() as session:
            user = await session.scalar(select(User).where(User.telegram_id == user_id))
            
            if not user:
                if isinstance(event, types.CallbackQuery):
                    await event.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start", show_alert=True)
                else:
                    await bot.send_message(user_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
                return

            if user.is_blocked:
                if isinstance(event, types.CallbackQuery):
                    await event.answer("üî¥ –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.", show_alert=True)
                else:
                    await bot.send_message(user_id, "üî¥ –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.")
                return
        return await func(event, *args, **kwargs)
    return wrapper

async def create_tables():
    async with engine.begin() as conn:
        await conn.run_sync(Base.metadata.create_all)


# --- –§–æ–Ω–æ–≤—ã–π –ø—Ä–æ—Ü–µ—Å—Å –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π ---
async def check_payments():
    async with async_session() as session:
        users_with_wallets = await session.execute(select(User).where(User.wallet_address.isnot(None)))
        for user in users_with_wallets.scalars().all():
            new_transactions = await check_new_transactions(user.wallet_address)
            for tx in new_transactions:
                existing_tx = await session.execute(select(Transaction).where(Transaction.txid == tx['txid']))
                if existing_tx.scalar_one_or_none(): continue
                user.balance += tx['amount']
                session.add(FinancialTransaction(user_id=user.telegram_id, type='deposit', amount=tx['amount']))
                new_tx_record = Transaction(txid=tx['txid'])
                session.add(new_tx_record)
                try:
                    await bot.send_message(user.telegram_id, f"‚úÖ –í–∞—à –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ <b>{tx['amount']:.2f} USDT</b>!")
                except Exception as e:
                    logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.telegram_id}: {e}")
        await session.commit()

def create_pagination_keyboard(page: int, total_pages: int):
    buttons = []
    if page > 0:
        buttons.append(types.InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=Paginator(action="prev", page=page-1).pack()))
    
    if total_pages > 1:
        buttons.append(types.InlineKeyboardButton(text=f"{page + 1}/{total_pages}", callback_data="ignore"))

    if page < total_pages - 1:
        buttons.append(types.InlineKeyboardButton(text="–í–ø–µ—Ä–µ–¥ ‚ñ∂Ô∏è", callback_data=Paginator(action="next", page=page+1).pack()))
    
    if not buttons:
        return None
    return types.InlineKeyboardMarkup(inline_keyboard=[buttons])

async def format_orders_page(orders: list):
    if not orders:
        return "–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤. –ó–∞–≥–ª—è–Ω–∏—Ç–µ –ø–æ–∑–∂–µ!"
    text = "<b>üî• –î–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–∫–∞–∑—ã:</b>\n\n"
    for order in orders:
        customer_username = f"@{order.customer.username}" if order.customer.username else "–°–∫—Ä—ã—Ç"
        category_name = order.category.name if order.category else "–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏" # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        text += (f"<b>–ó–∞–∫–∞–∑ ‚Ññ{order.id}</b> | {order.title}\n"
                 f"<b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> {category_name}\n"
                 f"<b>–¶–µ–Ω–∞:</b> {order.price:.2f} USDT\n"
                 f"<b>–ó–∞–∫–∞–∑—á–∏–∫:</b> {customer_username}\n"
                 f"<i>{order.description[:100]}...</i>\n"
                 f"‚û°Ô∏è /order {order.id} - –¥–ª—è –¥–µ—Ç–∞–ª–µ–π –∏ –æ—Ç–∫–ª–∏–∫–∞\n\n")
    return text

async def show_user_profile(message_or_callback: types.Message | types.CallbackQuery, user_id: int):
    async with async_session() as session:
        user = await session.scalar(select(User).where(User.telegram_id == user_id))
        if not user:
            return await message_or_callback.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID '{user_id}' –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        status = "üî¥ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω" if user.is_blocked else "üü¢ –ê–∫—Ç–∏–≤–µ–Ω"
        user_info_text = (f"<b>üë§ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:</b>\n\n"
                          f"<b>ID:</b> <code>{user.telegram_id}</code>\n"
                          f"<b>Username:</b> @{user.username if user.username else 'N/A'}\n"
                          f"<b>–ë–∞–ª–∞–Ω—Å:</b> {user.balance:.2f} USDT\n"
                          f"<b>–†–µ–π—Ç–∏–Ω–≥:</b> {user.rating:.2f} ‚≠ê ({user.reviews_count} –æ—Ç–∑—ã–≤–æ–≤)\n"
                          f"<b>–°—Ç–∞—Ç—É—Å:</b> {status}\n"
                          f"<b>–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:</b> {user.registration_date.strftime('%Y-%m-%d %H:%M')}")
        block_action = "unblock" if user.is_blocked else "block"
        block_text = "–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å" if user.is_blocked else "–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å"
        admin_keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
            [types.InlineKeyboardButton(text=block_text, callback_data=AdminCallback(action=block_action, user_id=user.telegram_id).pack())],
            [types.InlineKeyboardButton(text="‚ûï –ù–∞—á–∏—Å–ª–∏—Ç—å", callback_data=AdminCallback(action="credit", user_id=user.telegram_id).pack()),
             types.InlineKeyboardButton(text="‚ûñ –°–ø–∏—Å–∞—Ç—å", callback_data=AdminCallback(action="debit", user_id=user.telegram_id).pack())]
        ])
        # –û—Ç–≤–µ—á–∞–µ–º –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–æ–≥–æ, –æ—Ç–∫—É–¥–∞ –≤—ã–∑–≤–∞–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è
        if isinstance(message_or_callback, types.CallbackQuery):
             await message_or_callback.message.answer(user_info_text, reply_markup=admin_keyboard)
        else:
             await message_or_callback.answer(user_info_text, reply_markup=admin_keyboard)

@dp.message(CommandStart())
async def handle_start(message: types.Message, state: FSMContext, command: CommandObject = None):
    await state.clear()
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ deep-link
    if command and command.args and command.args.startswith("offer_"):
        async with async_session() as session:
            user = await session.scalar(select(User).where(User.telegram_id == message.from_user.id))
            if not user:
                await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /start –µ—â–µ —Ä–∞–∑, —á—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é, –ø—Ä–µ–∂–¥–µ —á–µ–º –æ—Ç–∫–ª–∏–∫–∞—Ç—å—Å—è –Ω–∞ –∑–∞–∫–∞–∑—ã.")
                session.add(User(telegram_id=message.from_user.id, username=message.from_user.username))
                await session.commit()
                return

            is_vip = user.vip_expires_at and user.vip_expires_at > datetime.now(UTC)
            if not is_vip:
                offers_count = await session.scalar(select(func.count(Offer.id)).where(Offer.executor_id == message.from_user.id))
                if offers_count >= 3:
                    await message.answer("‚ùå –í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –ª–∏–º–∏—Ç–∞ –Ω–∞ –æ—Ç–∫–ª–∏–∫–∏ (10).")
                    return

        try:
            order_id = int(command.args.split("_")[1])
            await state.set_state(MakeOffer.enter_message)
            await state.update_data(order_id=order_id)
            await message.answer(f"–í—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è –Ω–∞ –∑–∞–∫–∞–∑ ‚Ññ{order_id}.\n–í–≤–µ–¥–∏—Ç–µ —Å–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:")
            return
        except (IndexError, ValueError):
            pass 
            
    async with async_session() as session:
        user = await session.scalar(select(User).where(User.telegram_id == message.from_user.id))
        welcome_text = ""
        if user:
            if user.is_blocked:
                return await message.answer("üî¥ –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")
            welcome_text = f"–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {message.from_user.first_name}!"
        else:
            new_user = User(telegram_id=message.from_user.id, username=message.from_user.username)
            session.add(new_user)
            await session.commit()
            welcome_text = f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {message.from_user.first_name}! –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã."
        await message.answer(welcome_text, reply_markup=main_menu_keyboard)

@dp.message(Command("cancel"))
@dp.message(F.text.casefold() == "–æ—Ç–º–µ–Ω–∞")
async def cancel_handler(message: types.Message, state: FSMContext) -> None:
    current_state = await state.get_state()
    if current_state is None: return
    await state.clear()
    await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=main_menu_keyboard)

@dp.message(Command("stats"))
@admin_only
async def get_stats(message: types.Message):
    async with async_session() as session:
        total_users = await session.scalar(select(func.count(User.id)))
        
        # –°—á–∏—Ç–∞–µ–º –∑–∞–∫–∞–∑—ã –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
        open_orders = await session.scalar(select(func.count(Order.id)).where(Order.status == "open"))
        in_progress_orders = await session.scalar(select(func.count(Order.id)).where(Order.status == "in_progress"))
        dispute_orders = await session.scalar(select(func.count(Order.id)).where(Order.status == "dispute"))
        completed_orders = await session.scalar(select(func.count(Order.id)).where(Order.status == "completed"))
        
        # –°—á–∏—Ç–∞–µ–º —Å—É–º–º—É, –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–Ω—É—é –≤ —Å–¥–µ–ª–∫–∞—Ö
        hold_amount_res = await session.scalar(select(func.sum(Order.price)).where(Order.status == "in_progress"))
        hold_amount = hold_amount_res or Decimal("0.00")

        stats_text = (
            "<b>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:</b>\n\n"
            f"<b>–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b> {total_users}\n\n"
            "<b>–ó–∞–∫–∞–∑—ã:</b>\n"
            f"  - üü¢ –û—Ç–∫—Ä—ã—Ç—ã–µ: {open_orders}\n"
            f"  - üü° –í –ø—Ä–æ—Ü–µ—Å—Å–µ: {in_progress_orders}\n"
            f"  - üî¥ –í —Å–ø–æ—Ä–µ: {dispute_orders}\n"
            f"  - ‚ö™Ô∏è –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ: {completed_orders}\n\n"
            f"<b>–§–∏–Ω–∞–Ω—Å—ã:</b>\n"
            f"  - üí∞ –ó–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–æ –≤ —Å–¥–µ–ª–∫–∞—Ö: {hold_amount:.2f} USDT"
        )
        await message.answer(stats_text)




# --- –õ–æ–≥–∏–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞ (FSM) ---
@dp.message(F.text == "üìù –°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑")
@block_check
async def order_creation_start(message: types.Message, state: FSMContext):
    async with async_session() as session:
        user = await session.scalar(select(User).where(User.telegram_id == message.from_user.id))
        
        # --- –í–û–ó–í–†–ê–©–ê–ï–ú –ü–†–û–í–ï–†–ö–£ –õ–ò–ú–ò–¢–ê –ù–ê –°–û–ó–î–ê–ù–ò–ï –ó–ê–ö–ê–ó–û–í ---
        is_vip = user.vip_expires_at and user.vip_expires_at > datetime.now(UTC)
        if not is_vip:
            orders_count = await session.scalar(
                select(func.count(Order.id)).where(Order.customer_id == message.from_user.id)
            )
            if orders_count >= 10:
                return await message.answer(
                    "‚ùå –í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –ª–∏–º–∏—Ç–∞ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤ (10).\n"
                    "–ß—Ç–æ–±—ã —Å–Ω—è—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è, –ø—Ä–∏–æ–±—Ä–µ—Ç–∏—Ç–µ VIP-—Å—Ç–∞—Ç—É—Å."
                )
        # =======================================================

        # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ –±–∞–∑—ã
        categories_result = await session.execute(select(Category).order_by(Category.name))
        categories = categories_result.scalars().all()
        if not categories:
            return await message.answer("–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–Ω—ã. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–∫–æ—Ä–æ –∏—Ö –¥–æ–±–∞–≤–∏—Ç.")

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
    buttons = [
        [types.InlineKeyboardButton(text=cat.name, callback_data=CategoryCallback(action="select", category_id=cat.id).pack())]
        for cat in categories
    ]
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=buttons)
    
    await state.set_state(OrderCreation.enter_category)
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞:", reply_markup=keyboard)

@dp.callback_query(OrderCreation.enter_category, CategoryCallback.filter(F.action == "select"))
async def enter_category(callback: CallbackQuery, callback_data: CategoryCallback, state: FSMContext):
    await state.update_data(category_id=callback_data.category_id)
    await state.set_state(OrderCreation.enter_title)
    await callback.message.edit_text("–ö–∞—Ç–µ–≥–æ—Ä–∏—è –≤—ã–±—Ä–∞–Ω–∞. –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞.\n\n–î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ /cancel")


@dp.message(OrderCreation.enter_title)
@block_check
async def enter_title(message: types.Message, state: FSMContext):
    await state.update_data(title=message.text)
    await state.set_state(OrderCreation.enter_description)
    await message.answer("–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏.")
@dp.message(OrderCreation.enter_description)
@block_check
async def enter_description(message: types.Message, state: FSMContext):
    await state.update_data(description=message.text)
    await state.set_state(OrderCreation.enter_price)
    await message.answer("–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ —Ü–µ–Ω—É –∑–∞–∫–∞–∑–∞ –≤ USDT. –ù–∞–ø—Ä–∏–º–µ—Ä: 50.5")

@dp.message(OrderCreation.enter_price)
@block_check
async def enter_price(message: types.Message, state: FSMContext):
    try:
        price = Decimal(message.text)
        if price < 0:
            await message.answer("–¶–µ–Ω–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            return
    except Exception:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ü–µ–Ω—ã. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ. –ù–∞–ø—Ä–∏–º–µ—Ä: 50.5")
        return
        
    await state.update_data(price=price)
    order_data = await state.get_data()
    
    async with async_session() as session:
        # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        category = await session.get(Category, order_data['category_id'])
        category_name = category.name if category else "–ù–µ –≤—ã–±—Ä–∞–Ω–∞"
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —à–∞–≥–∞
        await state.update_data(category_name=category_name)

        user = await session.scalar(select(User).where(User.telegram_id == message.from_user.id))
        if not user or (price > 0 and user.balance < price):
            balance = user.balance if user else Decimal("0.00")
            await message.answer(f"–ù–∞ –≤–∞—à–µ–º –±–∞–ª–∞–Ω—Å–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ ({balance:.2f} USDT). –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", reply_markup=main_menu_keyboard)
            await state.clear()
            return

    text = (
        f"<b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞:</b>\n\n"
        f"<b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> {category_name}\n"
        f"<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {order_data['title']}\n"
        f"<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {order_data['description']}\n"
        f"<b>–¶–µ–Ω–∞:</b> {price:.2f} USDT\n\n"
        "–ù–∞–∂–º–∏—Ç–µ '‚úÖ –°–æ–∑–¥–∞—Ç—å', —á—Ç–æ–±—ã —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –∑–∞–∫–∞–∑."
    )
    confirm_keyboard = types.InlineKeyboardMarkup(inline_keyboard=[[types.InlineKeyboardButton(text="‚úÖ –°–æ–∑–¥–∞—Ç—å", callback_data="order_confirm")], [types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="order_cancel")]])
    await state.set_state(OrderCreation.confirm_order)
    await message.answer(text, reply_markup=confirm_keyboard)

@dp.callback_query(OrderCreation.confirm_order, F.data == "order_confirm")
async def confirm_order_creation(callback: CallbackQuery, state: FSMContext):
    await callback.answer("–°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑...")
    order_data = await state.get_data()
    
    async with async_session() as session:
        price = order_data['price']
        user = await session.scalar(select(User).where(User.telegram_id == callback.from_user.id))
        
        if not user or (price > 0 and user.balance < price):
            await callback.message.edit_text("–û—à–∏–±–∫–∞! –ù–∞ –≤–∞—à–µ–º –±–∞–ª–∞–Ω—Å–µ –±–æ–ª—å—à–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤.")
            await state.clear()
            return

        new_order = Order(
            title=order_data['title'],
            description=order_data['description'],
            price=price,
            customer_id=callback.from_user.id,
            category_id=order_data['category_id']
        )
        session.add(new_order)
        
        if price > 0:
            user.balance -= price
            await session.flush([new_order])
            session.add(FinancialTransaction(user_id=user.telegram_id, type='order_payment', amount=-price, order_id=new_order.id))
        
        await session.commit()
        
        await callback.message.edit_text(f"‚úÖ –í–∞—à –∑–∞–∫–∞–∑ ‚Ññ{new_order.id} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!", reply_markup=None)
        
        try:
            bot_info = await bot.get_me()
            bot_username = bot_info.username
            
            keyboard = types.InlineKeyboardMarkup(inline_keyboard=[[
                types.InlineKeyboardButton(
                    text="üöÄ –û—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è", 
                    url=f"https://t.me/{bot_username}?start=offer_{new_order.id}"
                )
            ]])
            
            # –ë–µ—Ä–µ–º –∏–º—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            category_name = order_data.get('category_name', '–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏')
            
            order_text = (
                f"<b>üü¢ –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ ‚Ññ{new_order.id}</b>\n\n"
                f"<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {new_order.title}\n"
                f"<b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> {category_name}\n"
                f"<b>–¶–µ–Ω–∞:</b> {new_order.price:.2f} USDT\n\n"
                f"<i>{new_order.description}</i>"
            )
            await bot.send_message(ORDER_CHANNEL_ID, order_text, reply_markup=keyboard)
        except Exception as e:
            logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑ {new_order.id} –≤ –∫–∞–Ω–∞–ª: {e}")
            await callback.message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –∑–∞–∫–∞–∑ –≤ –∫–∞–Ω–∞–ª–µ. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
            
    await state.clear()

    
@dp.callback_query(OrderCreation.confirm_order, F.data == "order_cancel")
async def cancel_order_creation(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await state.clear()
    await callback.message.edit_text("–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=None)

# --- –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ù–ö–†–ï–¢–ù–´–• –ö–ù–û–ü–û–ö –ò –ö–û–ú–ê–ù–î ---
@dp.message(F.text == "üî• –õ–µ–Ω—Ç–∞ –∑–∞–∫–∞–∑–æ–≤")
@block_check
async def handle_order_feed(message: types.Message):
    async with async_session() as session:
        total_orders_res = await session.scalar(
            select(func.count(Order.id)).where(Order.status == "open", Order.customer_id != message.from_user.id)
        )
        total_pages = math.ceil(total_orders_res / PAGE_SIZE)
        
        stmt = (
            select(Order)
            .where(Order.status == "open", Order.customer_id != message.from_user.id)
            .options(joinedload(Order.customer), joinedload(Order.category))
            .order_by(Order.creation_date.desc())
            .limit(PAGE_SIZE).offset(0)
        )
        orders = (await session.execute(stmt)).scalars().all()
        
        text = await format_orders_page(orders)
        keyboard = create_pagination_keyboard(page=0, total_pages=total_pages)
        
        await message.answer(text, reply_markup=keyboard)
    
@dp.callback_query(Paginator.filter())
@block_check
async def handle_order_feed_page(callback: CallbackQuery, callback_data: Paginator):
    page = callback_data.page
    async with async_session() as session:
        total_orders_res = await session.scalar(
            select(func.count(Order.id)).where(Order.status == "open", Order.customer_id != callback.from_user.id)
        )
        total_pages = math.ceil(total_orders_res / PAGE_SIZE)

        offset = page * PAGE_SIZE
        stmt = (
        select(Order).where(Order.status == "open", Order.customer_id != callback.from_user.id)
        .options(joinedload(Order.customer), joinedload(Order.category)) # –î–û–ë–ê–í–õ–ï–ù–û joinedload(Order.category)
        .order_by(Order.creation_date.desc())
        .limit(PAGE_SIZE).offset(offset)
    )
        orders = (await session.execute(stmt)).scalars().all()
        
        text = await format_orders_page(orders)
        keyboard = create_pagination_keyboard(page=page, total_pages=total_pages)

        await callback.message.edit_text(text, reply_markup=keyboard)
        await callback.answer()


@dp.message(F.text == "üìÇ –ú–æ–∏ –∑–∞–∫–∞–∑—ã")
@block_check
async def handle_my_orders(message: types.Message):
    async with async_session() as session:
        user_id = message.from_user.id
        
        # === –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –î–æ–±–∞–≤–ª—è–µ–º joinedload(Order.category) ===
        created_orders_stmt = (
            select(Order)
            .where(Order.customer_id == user_id)
            .options(joinedload(Order.category)) # <--- –î–æ–±–∞–≤–ª–µ–Ω–æ
            .order_by(Order.status.desc(), Order.creation_date.desc())
        )
        created_orders_res = await session.execute(created_orders_stmt)
        created_orders = created_orders_res.scalars().unique().all()

        executing_orders_stmt = (
            select(Order)
            .where(Order.executor_id == user_id)
            .options(joinedload(Order.category)) # <--- –î–æ–±–∞–≤–ª–µ–Ω–æ
            .order_by(Order.status.desc(), Order.creation_date.desc())
        )
        executing_orders_res = await session.execute(executing_orders_stmt)
        executing_orders = executing_orders_res.scalars().unique().all()
        # =======================================================

        if not created_orders and not executing_orders:
            return await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤. \n–°–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ–π –∏–ª–∏ –Ω–∞–π–¥–∏—Ç–µ –≤ –ª–µ–Ω—Ç–µ /feed")
        
        response_text = ""
        status_emoji = {"open": "üü¢", "in_progress": "üü°", "pending_approval": "üîµ", "completed": "‚ö™Ô∏è", "dispute": "üî¥"}

        if created_orders:
            response_text += "<b>üóÇÔ∏è –í–∞—à–∏ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã:</b>\n"
            for order in created_orders:
                category_name = f" ({order.category.name})" if order.category else ""
                response_text += f"{status_emoji.get(order.status, '')} ‚Ññ{order.id}: {order.title}{category_name}\n"
        
        if executing_orders:
            response_text += "\n<b>üíº –ó–∞–∫–∞–∑—ã, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –≤—ã–ø–æ–ª–Ω—è–µ—Ç–µ:</b>\n"
            for order in executing_orders:
                category_name = f" ({order.category.name})" if order.category else ""
                response_text += f"{status_emoji.get(order.status, '')} ‚Ññ{order.id}: {order.title}{category_name}\n"
        
        response_text += "\n\n‚ÑπÔ∏è –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π –∏ –¥–µ–π—Å—Ç–≤–∏–π –ø–æ –∑–∞–∫–∞–∑—É, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /order `id_–∑–∞–∫–∞–∑–∞`"
        await message.answer(response_text)
        
@dp.message(Command("order"))
@block_check
async def view_specific_order(message: types.Message, command: CommandObject):
    if not command.args or not command.args.isdigit():
        return await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ ID –∑–∞–∫–∞–∑–∞. –ü—Ä–∏–º–µ—Ä: /order 123")
    
    order_id = int(command.args)
    user_id = message.from_user.id
    
    async with async_session() as session:
        # –ü–æ–¥–≥—Ä—É–∂–∞–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –∑–∞–∫–∞–∑—á–∏–∫–µ —Å—Ä–∞–∑—É
        order = await session.get(Order, order_id, options=[joinedload(Order.customer), joinedload(Order.category)]) # –î–û–ë–ê–í–õ–ï–ù–û
        
        if not order:
            return await message.answer("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.")

        # –ù–æ–≤–∞—è –ª–æ–≥–∏–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞
        is_participant = order.customer_id == user_id or order.executor_id == user_id
        if order.status != 'open' and not is_participant:
            return await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –∑–∞–∫–∞–∑—É, —Ç–∞–∫ –∫–∞–∫ –æ–Ω —É–∂–µ –≤ —Ä–∞–±–æ—Ç–µ –∏–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω.")

        status_emoji = {"open": "üü¢", "in_progress": "üü°", "pending_approval": "üîµ", "completed": "‚ö™Ô∏è", "dispute": "üî¥"}
        customer_username = f"@{order.customer.username}" if order.customer.username else "–°–∫—Ä—ã—Ç"
        category_name = order.category.name if order.category else "–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"
        text = (
            f"{status_emoji.get(order.status, '')} <b>–ó–∞–∫–∞–∑ ‚Ññ{order.id}: {order.title}</b>\n\n"
            f"<b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> {category_name}\n"
            f"<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {order.description}\n\n"
            f"<b>–¶–µ–Ω–∞:</b> {order.price:.2f} USDT\n"
            f"<b>–°—Ç–∞—Ç—É—Å:</b> {order.status}\n"
            f"<b>–ó–∞–∫–∞–∑—á–∏–∫:</b> {customer_username}"
        )
        
        keyboard = None
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–∏–µ –∫–Ω–æ–ø–∫–∏ –ø–æ–∫–∞–∑–∞—Ç—å
        if order.status == "open":
            if order.customer_id == user_id: # –ï—Å–ª–∏ —ç—Ç–æ –Ω–∞—à –∑–∞–∫–∞–∑
                offers_count = await session.scalar(select(func.count(Offer.id)).where(Offer.order_id == order.id))
                if offers_count > 0:
                    text += f"\n<b>–û—Ç–∫–ª–∏–∫–æ–≤:</b> {offers_count}"
                    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[[types.InlineKeyboardButton(
                        text="–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç–∫–ª–∏–∫–∏", callback_data=OrderCallback(action="view", order_id=order.id).pack())]])
            else: # –ï—Å–ª–∏ —ç—Ç–æ —á—É–∂–æ–π –æ—Ç–∫—Ä—ã—Ç—ã–π –∑–∞–∫–∞–∑
                 keyboard = types.InlineKeyboardMarkup(inline_keyboard=[[types.InlineKeyboardButton(
                    text="üöÄ –û—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è", callback_data=OrderCallback(action="offer", order_id=order.id).pack())]])

        elif order.status == "in_progress" and order.executor_id == user_id:
            keyboard = types.InlineKeyboardMarkup(inline_keyboard=[[types.InlineKeyboardButton(
                text="‚úÖ –°–¥–∞—Ç—å —Ä–∞–±–æ—Ç—É", callback_data=OrderCallback(action="submit_work", order_id=order.id).pack())]])
        
        await message.answer(text, reply_markup=keyboard)

@dp.callback_query(F.data == "buy_vip")
@block_check
async def buy_vip_handler(callback: CallbackQuery):
    await callback.answer()
    
    keyboard_buttons = []
    for days, price in VIP_PLANS.items():
        keyboard_buttons.append([
            types.InlineKeyboardButton(
                text=f"{days} –¥–Ω–µ–π - {price:.2f} USDT",
                callback_data=VIPCallback(action="buy", days=days).pack()
            )
        ])

    keyboard = types.InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞–Ω –ø–æ–¥–ø–∏—Å–∫–∏:", reply_markup=keyboard)

# –ù–û–í–´–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö –ü–û–ö–£–ü–ö–ò –ö–û–ù–ö–†–ï–¢–ù–û–ì–û –ü–õ–ê–ù–ê
@dp.callback_query(VIPCallback.filter(F.action == "buy"))
@block_check
async def process_vip_buy(callback: CallbackQuery, callback_data: VIPCallback):
    days = callback_data.days
    price = VIP_PLANS.get(days)

    if not price:
        return await callback.answer("–ü–ª–∞–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)

    async with async_session() as session:
        user = await session.scalar(select(User).where(User.telegram_id == callback.from_user.id))
        
        if user.balance < price:
            await callback.answer("–ù–∞ –≤–∞—à–µ–º –±–∞–ª–∞–Ω—Å–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤.", show_alert=True)
            return

        # –°–ø–∏—Å—ã–≤–∞–µ–º –¥–µ–Ω—å–≥–∏ –∏ –æ–±–Ω–æ–≤–ª—è–µ–º VIP
        user.balance -= price
        session.add(FinancialTransaction(user_id=user.telegram_id, type='vip_payment', amount=-price))
        
        current_expiry = user.vip_expires_at or datetime.now(UTC)
        if current_expiry < datetime.now(UTC):
            current_expiry = datetime.now(UTC)
        
        user.vip_expires_at = current_expiry + timedelta(days=days)
        await session.commit()
    
    await callback.message.edit_text(
        f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–æ–±—Ä–µ–ª–∏ VIP-—Å—Ç–∞—Ç—É—Å –Ω–∞ {days} –¥–Ω–µ–π.\n"
        f"–û–Ω –∞–∫—Ç–∏–≤–µ–Ω –¥–æ {user.vip_expires_at.strftime('%d.%m.%Y')}."
    )
    await callback.answer()

@dp.message(F.text == "üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å")
@block_check
async def handle_profile(message: types.Message):
    async with async_session() as session:
        user = await session.scalar(select(User).where(User.telegram_id == message.from_user.id))
        if not user:
            return await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º VIP-—Å—Ç–∞—Ç—É—Å
        vip_status = "–ê–∫—Ç–∏–≤–µ–Ω ‚úÖ" if user.vip_expires_at and user.vip_expires_at > datetime.now(UTC) else "–ù–µ–∞–∫—Ç–∏–≤–µ–Ω ‚ùå"
        
        profile_text = (
            f"<b>üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å</b>\n\n"
            f"<b>–ë–∞–ª–∞–Ω—Å:</b> <code>{user.balance:.2f} USDT</code>\n"
            f"<b>–†–µ–π—Ç–∏–Ω–≥:</b> {user.rating:.2f} ‚≠ê ({user.reviews_count} –æ—Ç–∑—ã–≤–æ–≤)\n"
            f"<b>VIP –°—Ç–∞—Ç—É—Å:</b> {vip_status}"
        )
        if vip_status == "–ê–∫—Ç–∏–≤–µ–Ω ‚úÖ":
            profile_text += f"\n  (–¥–æ {user.vip_expires_at.strftime('%d.%m.%Y')})"
            
        await message.answer(profile_text, reply_markup=profile_keyboard)

# --- –ù–û–í–ê–Ø –ê–î–ú–ò–ù-–ö–û–ú–ê–ù–î–ê: –í–´–î–ê–ß–ê VIP ---
@dp.message(Command("grant_vip"))
@admin_only
async def grant_vip(message: types.Message, command: CommandObject):
    args = (command.args or "").split()
    if len(args) != 2:
        return await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /grant_vip <user_id> <days>")
    
    try:
        user_id = int(args[0])
        days = int(args[1])
    except ValueError:
        return await message.answer("ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–∞–º–∏.")

    async with async_session() as session:
        user = await session.scalar(select(User).where(User.telegram_id == user_id))
        if not user:
            return await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–ª–∏ –ø—Ä–æ–¥–ª–µ–≤–∞–µ–º VIP
        current_expiry = user.vip_expires_at or datetime.now(UTC)
        if current_expiry < datetime.now(UTC):
            current_expiry = datetime.now(UTC)
            
        user.vip_expires_at = current_expiry + timedelta(days=days)
        await session.commit()
        
        await message.answer(f"‚úÖ VIP-—Å—Ç–∞—Ç—É—Å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–¥–ª–µ–Ω –Ω–∞ {days} –¥–Ω–µ–π.\n"
                             f"–ù–æ–≤–∞—è –¥–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: {user.vip_expires_at.strftime('%d.%m.%Y')}")
        
        try:
            await bot.send_message(user_id, f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –≤—ã–¥–∞–ª –≤–∞–º VIP-—Å—Ç–∞—Ç—É—Å –Ω–∞ {days} –¥–Ω–µ–π.")
        except Exception as e:
            logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ VIP-—Å—Ç–∞—Ç—É—Å–µ: {e}")


# === –ò–ó–ú–ï–ù–ï–ù–ò–ï 2: –£–ø—Ä–æ—â–∞–µ–º –∫–æ–º–∞–Ω–¥—É /user ===
@dp.message(Command("user"))
@admin_only
async def get_user_info_command(message: types.Message, command: CommandObject):
    if not command.args:
        return await message.answer("–£–∫–∞–∂–∏—Ç–µ ID –∏–ª–∏ @username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü—Ä–∏–º–µ—Ä: /user 123456789")
        
    user_identifier = command.args
    async with async_session() as session:
        if user_identifier.isdigit():
            user = await session.scalar(select(User).where(User.telegram_id == int(user_identifier)))
        else:
            user = await session.scalar(select(User).where(User.username == user_identifier.replace("@", "")))
        
        if not user:
            return await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å '{user_identifier}' –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        
        # –í—ã–∑—ã–≤–∞–µ–º –Ω–∞—à—É –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        await show_user_profile(message, user.telegram_id)


# === –ò–ó–ú–ï–ù–ï–ù–ò–ï 3: –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ ===
@dp.callback_query(AdminCallback.filter(F.action.in_(["block", "unblock"])))
async def handle_block_user(callback: CallbackQuery, callback_data: AdminCallback):
    user_id_to_change = callback_data.user_id
    action = callback_data.action
    
    async with async_session() as session:
        user = await session.scalar(select(User).where(User.telegram_id == user_id_to_change))
        if not user:
            return await callback.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)

        if action == "block":
            user.is_blocked = True
            await callback.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.", show_alert=True)
            try: await bot.send_message(user_id_to_change, "üî¥ –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –±—ã–ª –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
            except Exception: pass
        else: # unblock
            user.is_blocked = False
            await callback.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.", show_alert=True)
            try: await bot.send_message(user_id_to_change, "üü¢ –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –±—ã–ª —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
            except Exception: pass
            
        await session.commit()
    
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å
    await callback.message.delete()
    await show_user_profile(callback.message, user_id_to_change)


@dp.callback_query(AdminCallback.filter(F.action.in_(["credit", "debit"])))
async def start_balance_change(callback: CallbackQuery, callback_data: AdminCallback, state: FSMContext):
    await state.set_state(AdminBalanceChange.enter_amount)
    await state.update_data(
        user_id=callback_data.user_id,
        action=callback_data.action,
        message_id_to_delete=callback.message.message_id # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
    )
    action_text = "–Ω–∞—á–∏—Å–ª–∏—Ç—å" if callback_data.action == "credit" else "—Å–ø–∏—Å–∞—Ç—å"
    await callback.answer()
    await callback.message.answer(f"–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É, –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ {action_text} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {callback_data.user_id}:")

@dp.message(AdminBalanceChange.enter_amount)
async def process_balance_change_amount(message: types.Message, state: FSMContext):
    try:
        amount = Decimal(message.text)
        if amount <= 0:
            return await message.answer("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.")
    except Exception:
        return await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
        
    data = await state.get_data()
    action = data.get("action")
    user_id = data.get("user_id")
    
    async with async_session() as session:
        user = await session.scalar(select(User).where(User.telegram_id == user_id))
        if not user:
            await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return await state.clear()

        if action == "credit":
            user.balance += amount
            session.add(FinancialTransaction(user_id=user_id, type='admin_credit', amount=amount))
        
            final_text = f"‚úÖ –£—Å–ø–µ—à–Ω–æ –Ω–∞—á–∏—Å–ª–µ–Ω–æ {amount:.2f} USDT –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}."
        else: # debit
            if user.balance < amount:
                await message.answer(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user.balance:.2f} USDT.")
                return await state.clear()
            user.balance -= amount
            session.add(FinancialTransaction(user_id=user_id, type='admin_debit', amount=-amount))
        
            final_text = f"‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–ø–∏—Å–∞–Ω–æ {amount:.2f} USDT —Å –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}."

        await session.commit()
    
    await message.answer(final_text)
    
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –∫–∞—Ä—Ç–æ—á–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º —Å—É–º–º—ã
    await bot.delete_message(message.chat.id, data.get("message_id_to_delete"))
    await message.delete()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∫–∞—Ä—Ç–æ—á–∫—É
    new_message = await message.answer(f"/user {user_id}")
    await get_user_info(new_message, CommandObject(command=Command(commands=['user']), args=str(user_id)))
    await state.clear()




# --- –õ–æ–≥–∏–∫–∞ –æ—Ç–∫–ª–∏–∫–∞ (FSM) ---
@dp.callback_query(OrderCallback.filter(F.action == "offer"))
@block_check
async def handle_make_offer_start(callback: CallbackQuery, callback_data: OrderCallback, state: FSMContext):
    async with async_session() as session:
        user = await session.scalar(select(User).where(User.telegram_id == callback.from_user.id))
        if not user:
            await callback.answer("–ß—Ç–æ–±—ã –æ—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start", show_alert=True)
            return

        # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ –Ω–∞ –æ—Ç–∫–ª–∏–∫–∏ ---
        is_vip = user.vip_expires_at and user.vip_expires_at > datetime.now(UTC)
        if not is_vip:
            offers_count = await session.scalar(
                select(func.count(Offer.id)).where(Offer.executor_id == callback.from_user.id)
            )
            if offers_count >= 2:
                await callback.answer(
                    "–í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –ª–∏–º–∏—Ç–∞ –Ω–∞ –æ—Ç–∫–ª–∏–∫–∏ (10). –ß—Ç–æ–±—ã —Å–Ω—è—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è, –ø—Ä–∏–æ–±—Ä–µ—Ç–∏—Ç–µ VIP-—Å—Ç–∞—Ç—É—Å.",
                    show_alert=True
                )
                return
        # =======================================================

        existing_offer = await session.scalar(
            select(Offer).where(Offer.order_id == callback_data.order_id, Offer.executor_id == callback.from_user.id)
        )
        if existing_offer:
            await callback.answer("–í—ã —É–∂–µ –æ—Ç–∫–ª–∏–∫–∞–ª–∏—Å—å –Ω–∞ —ç—Ç–æ—Ç –∑–∞–∫–∞–∑.", show_alert=True)
            return

    await state.set_state(MakeOffer.enter_message)
    await state.update_data(order_id=callback_data.order_id)
    await callback.answer()
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∑–∞–∫–∞–∑—á–∏–∫–∞:\n\n–î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ /cancel")


# ... (–æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ FSM –æ—Ç–∫–ª–∏–∫–∞ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
@dp.message(MakeOffer.enter_message)
async def handle_offer_message(message: types.Message, state: FSMContext):
    data = await state.get_data()
    order_id = data.get("order_id")
    async with async_session() as session:
        new_offer = Offer(order_id=order_id, executor_id=message.from_user.id, message=message.text)
        session.add(new_offer)
        order = await session.get(Order, order_id)
        if order:
            await session.commit()
            await message.answer("‚úÖ –í–∞—à –æ—Ç–∫–ª–∏–∫ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
            try:
                await bot.send_message(order.customer_id, f"üîî –ü–æ –≤–∞—à–µ–º—É –∑–∞–∫–∞–∑—É ‚Ññ{order.id} ('{order.title}') –Ω–æ–≤—ã–π –æ—Ç–∫–ª–∏–∫!")
            except Exception as e:
                logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –∑–∞–∫–∞–∑—á–∏–∫–∞ {order.customer_id} –æ –Ω–æ–≤–æ–º –æ—Ç–∫–ª–∏–∫–µ: {e}")
        else:
            await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    await state.clear()


# --- –õ–æ–≥–∏–∫–∞ –≤—ã–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤ (FSM) ---
@dp.callback_query(F.data == "withdraw")
async def start_withdrawal(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await state.set_state(Withdrawal.enter_amount)
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –≤—ã–≤–æ–¥–∞ –≤ USDT.\n\n–î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ /cancel")
# ... (–æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ FSM –≤—ã–≤–æ–¥–∞ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
@dp.message(Withdrawal.enter_amount)
async def enter_withdrawal_amount(message: types.Message, state: FSMContext):
    try:
        amount = Decimal(message.text)
        if amount <= 0:
            await message.answer("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            return
    except Exception:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ. –ù–∞–ø—Ä–∏–º–µ—Ä: 15.5")
        return
    async with async_session() as session:
        user = await session.scalar(select(User).where(User.telegram_id == message.from_user.id))
        if user.balance < amount:
            await message.answer(f"–ù–∞ –≤–∞—à–µ–º –±–∞–ª–∞–Ω—Å–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ ({user.balance:.2f} USDT).")
            return
    await state.update_data(amount=amount)
    await state.set_state(Withdrawal.enter_address)
    await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à TRC-20 –∞–¥—Ä–µ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è USDT.")
@dp.message(Withdrawal.enter_address)
async def enter_withdrawal_address(message: types.Message, state: FSMContext):
    address = message.text
    if not (address.startswith("T") and len(address) == 34):
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∞–¥—Ä–µ—Å–∞ TRC-20. –ê–¥—Ä–µ—Å –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å 'T' –∏ —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ 34 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return
    await state.update_data(address=address)
    data = await state.get_data()
    amount = data.get("amount")
    text = (f"<b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤:</b>\n\n<b>–°—É–º–º–∞:</b> {amount:.2f} USDT\n<b>–ù–∞ –∞–¥—Ä–µ—Å:</b> <code>{address}</code>\n\n"
            "‚ö†Ô∏è **–í–Ω–∏–º–∞–Ω–∏–µ!** –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∞–¥—Ä–µ—Å –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ. –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞ –±—É–¥—É—Ç —É—Ç–µ—Ä—è–Ω—ã.")
    confirm_keyboard = types.InlineKeyboardMarkup(inline_keyboard=[[types.InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_withdrawal_yes")], [types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="confirm_withdrawal_no")]])
    await state.set_state(Withdrawal.confirm_withdrawal)
    await message.answer(text, reply_markup=confirm_keyboard)
@dp.callback_query(Withdrawal.confirm_withdrawal, F.data == "confirm_withdrawal_yes")
async def confirm_withdrawal(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text("‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥...")
    data = await state.get_data()
    amount = data.get("amount")
    address = data.get("address")
    success, result = await create_payout(address, amount)
    if success:
        async with async_session() as session:
            user = await session.scalar(select(User).where(User.telegram_id == callback.from_user.id))
            if user and user.balance >= amount:
                user.balance -= amount
                session.add(FinancialTransaction(user_id=user.telegram_id, type='withdrawal', amount=-amount))
                await session.commit()
                await callback.message.edit_text(f"‚úÖ –ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ {amount:.2f} USDT —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω. –°—Ä–µ–¥—Å—Ç–≤–∞ –ø–æ—Å—Ç—É–ø—è—Ç –Ω–∞ –≤–∞—à –∫–æ—à–µ–ª–µ–∫ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.")
            else:
                await callback.message.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ —Å–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.")
    else:
        await callback.message.edit_text(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥.\n–ü—Ä–∏—á–∏–Ω–∞: {result}\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.")
    await state.clear()
@dp.callback_query(Withdrawal.confirm_withdrawal, F.data == "confirm_withdrawal_no")
async def cancel_withdrawal(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await state.clear()
    await callback.message.edit_text("–í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ –æ—Ç–º–µ–Ω–µ–Ω.")


# --- –õ–æ–≥–∏–∫–∞ –æ—Ç–∑—ã–≤–æ–≤ (FSM) ---
@dp.callback_query(ReviewCallback.filter(F.action == "start"))
async def start_review(callback: CallbackQuery, callback_data: ReviewCallback, state: FSMContext):
    await callback.message.edit_reply_markup(reply_markup=None)
    await state.set_state(LeaveReview.enter_rating)
    await state.update_data(order_id=callback_data.order_id, reviewee_id=callback_data.reviewee_id)
    rating_kb = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text=f"{'‚≠ê'*i}", callback_data=f"rating_{i}") for i in range(1, 6)]
    ])
    await callback.message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ü–µ–Ω–∏—Ç–µ –≤–∞—à—É —Å–¥–µ–ª–∫—É –ø–æ 5-–∑–≤–µ–∑–¥–æ—á–Ω–æ–π —à–∫–∞–ª–µ:", reply_markup=rating_kb)
@dp.callback_query(LeaveReview.enter_rating, F.data.startswith("rating_"))
async def enter_rating(callback: CallbackQuery, state: FSMContext):
    rating = int(callback.data.split("_")[1])
    await state.update_data(rating=rating)
    await state.set_state(LeaveReview.enter_text)
    await callback.message.edit_text("–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ü–µ–Ω–∫—É! –¢–µ–ø–µ—Ä—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–∑—ã–≤.")
@dp.message(LeaveReview.enter_text)
async def enter_review_text(message: types.Message, state: FSMContext):
    data = await state.get_data()
    rating = data.get("rating")
    order_id = data.get("order_id")
    reviewee_id = data.get("reviewee_id")
    async with async_session() as session:
        new_review = Review(
            order_id=order_id,
            reviewer_id=message.from_user.id,
            reviewee_id=reviewee_id,
            rating=rating,
            text=message.text
        )
        session.add(new_review)
        reviewee_user_stmt = select(User).where(User.telegram_id == reviewee_id)
        reviewee_user = await session.scalar(reviewee_user_stmt)
        if reviewee_user:
            old_total_rating = reviewee_user.rating * reviewee_user.reviews_count
            new_review_count = reviewee_user.reviews_count + 1
            new_average_rating = (old_total_rating + rating) / new_review_count
            reviewee_user.rating = new_average_rating
            reviewee_user.reviews_count = new_review_count
        await session.commit()
    await message.answer("‚úÖ –°–ø–∞—Å–∏–±–æ, –≤–∞—à –æ—Ç–∑—ã–≤ –ø—Ä–∏–Ω—è—Ç!")
    await state.clear()




@dp.message(Command("profile"))
@block_check
async def get_public_profile(message: types.Message, command: CommandObject):
    user_identifier = command.args or str(message.from_user.id)
    
    async with async_session() as session:
        if user_identifier.isdigit():
            user = await session.scalar(select(User).where(User.telegram_id == int(user_identifier)))
        else:
            user = await session.scalar(select(User).where(User.username == user_identifier.replace("@", "")))

        if not user:
            return await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")

        # –°—á–∏—Ç–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ —Å–¥–µ–ª–∫–∏
        completed_deals = await session.scalar(
            select(func.count(Order.id)).where(
                or_(Order.customer_id == user.telegram_id, Order.executor_id == user.telegram_id),
                Order.status == 'completed'
            )
        )
        
        profile_text = (
            f"<b>üë§ –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{user.username if user.username else 'N/A'}</b>\n\n"
            f"<b>–†–µ–π—Ç–∏–Ω–≥:</b> {user.rating:.2f} ‚≠ê ({user.reviews_count} –æ—Ç–∑—ã–≤–æ–≤)\n"
            f"<b>–ó–∞–≤–µ—Ä—à–µ–Ω–æ —Å–¥–µ–ª–æ–∫:</b> {completed_deals}\n"
            f"<b>–ù–∞ —Å–µ—Ä–≤–∏—Å–µ —Å:</b> {user.registration_date.strftime('%d.%m.%Y')}"
        )
        await message.answer(profile_text)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 –æ—Ç–∑—ã–≤–∞
        reviews = await session.scalars(
            select(Review).where(Review.reviewee_id == user.telegram_id).order_by(Review.id.desc()).limit(3)
        )
        
        reviews_list = reviews.all()
        if reviews_list:
            review_text = "\n<b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ—Ç–∑—ã–≤—ã:</b>\n"
            for review in reviews_list:
                review_text += f"  - <i>¬´{review.text}¬ª</i> ({review.rating}‚≠ê)\n"
            await message.answer(review_text)


@dp.callback_query(F.data == "deals_history")
@block_check
async def handle_deals_history(callback: CallbackQuery):
    await callback.answer()
    async with async_session() as session:
        completed_orders_result = await session.scalars(
            select(Order).where(
                or_(Order.customer_id == callback.from_user.id, Order.executor_id == callback.from_user.id),
                Order.status == 'completed'
            ).order_by(Order.creation_date.desc()).limit(10)
        )
        
        completed_orders = completed_orders_result.all()

        history_text = "<b>üìú –ò—Å—Ç–æ—Ä–∏—è 10 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Å–¥–µ–ª–æ–∫:</b>\n\n"
        if not completed_orders:
            history_text = "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Å–¥–µ–ª–æ–∫."
        else:
            for order in completed_orders:
                role = "–ó–∞–∫–∞–∑—á–∏–∫" if order.customer_id == callback.from_user.id else "–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å"
                history_text += f"‚Ä¢ <b>‚Ññ{order.id}:</b> {order.title} ({order.price:.2f} USDT) - <i>–†–æ–ª—å: {role}</i>\n"

        await callback.message.answer(history_text)

@dp.callback_query(F.data == "finance_history")
@block_check
async def handle_finance_history(callback: CallbackQuery):
    await callback.answer()
    async with async_session() as session:
        transactions_result = await session.scalars(
            select(FinancialTransaction)
            .where(FinancialTransaction.user_id == callback.from_user.id)
            .order_by(FinancialTransaction.timestamp.desc())
            .limit(15)
        )
        
        transactions = transactions_result.all()

        history_text = "<b>üí∏ –ò—Å—Ç–æ—Ä–∏—è 15 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π —Å –±–∞–ª–∞–Ω—Å–æ–º:</b>\n\n"
        types_map = {
            'deposit': '‚úÖ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ', 'withdrawal': '‚ûñ –í—ã–≤–æ–¥', 'order_payment': 'üßæ –û–ø–ª–∞—Ç–∞ –∑–∞–∫–∞–∑–∞',
            'order_reward': 'üí∞ –í–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ', 'dispute_resolution': '‚öñÔ∏è –†–µ—à–µ–Ω–∏–µ –ø–æ —Å–ø–æ—Ä—É',
            'admin_credit': '‚öôÔ∏è –ù–∞—á–∏—Å–ª–µ–Ω–∏–µ', 'admin_debit': '‚öôÔ∏è –°–ø–∏—Å–∞–Ω–∏–µ'
        }

        if not transactions:
            history_text = "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ –±—ã–ª–æ –æ–ø–µ—Ä–∞—Ü–∏–π —Å –±–∞–ª–∞–Ω—Å–æ–º."
        else:
            for trans in transactions:
                sign = "+" if trans.amount > 0 else ""
                type_str = types_map.get(trans.type, trans.type)
                history_text += f"‚Ä¢ {trans.timestamp.strftime('%d.%m.%y %H:%M')}: {sign}{trans.amount:.2f} USDT ({type_str})\n"

        await callback.message.answer(history_text)

@dp.message(F.text == "üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞")
async def start_support_chat(message: types.Message, state: FSMContext):
    await state.set_state(SupportChat.in_chat)
    await message.answer(
        "–í—ã –≤–æ—à–ª–∏ –≤ —á–∞—Ç —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π. –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–∫–æ—Ä–æ –æ—Ç–≤–µ—Ç–∏—Ç.\n\n"
        "–ß—Ç–æ–±—ã –≤—ã–π—Ç–∏ –∏–∑ —á–∞—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /cancel."
    )
# –®–∞–≥ 2: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É
@dp.message(SupportChat.in_chat, F.text)
async def forward_to_admin(message: types.Message, state: FSMContext):
    user_info = f"@{message.from_user.username}" if message.from_user.username else f"ID: {message.from_user.id}"
    
    # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
    await bot.send_message(
        ADMIN_ID,
        f"<b>–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É –æ—Ç {user_info}</b> (ID: `{message.from_user.id}`)\n\n"
        f"–¢–µ–∫—Å—Ç: {message.text}"
    )
    await message.answer("–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")

# –®–∞–≥ 3: –ê–¥–º–∏–Ω –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∏—Å–ø–æ–ª—å–∑—É—è —Ñ—É–Ω–∫—Ü–∏—é "–û—Ç–≤–µ—Ç–∏—Ç—å")
@dp.message(F.reply_to_message, lambda msg: msg.from_user.id == ADMIN_ID)
async def forward_to_user(message: types.Message):
    # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ç–µ–∫—Å—Ç–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    try:
        replied_message_text = message.reply_to_message.text
        # –ò—â–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å—Ç—Ä–æ–∫–µ "(ID: `123456789`)"
        user_id_str = replied_message_text.split("(ID: `")[1].split("`)")[0]
        user_id = int(user_id_str)

        await bot.send_message(user_id, f"<b>–û—Ç–≤–µ—Ç –æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏:</b>\n\n{message.text}")
        await message.answer("‚úÖ –í–∞—à –æ—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")
    except (IndexError, ValueError):
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –æ—Ç–≤–µ—á–∞–µ—Ç–µ –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –±–æ—Ç–∞.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ –∞–¥–º–∏–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞.")

@dp.callback_query(F.data == "top_up")
async def handle_top_up(callback: CallbackQuery):
    await callback.answer()
    async with async_session() as session:
        stmt = select(User).where(User.telegram_id == callback.from_user.id)
        result = await session.execute(stmt)
        user = result.scalar_one_or_none()
        if not user:
            await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ /start.")
            return
        wallet = user.wallet_address
        if not wallet:
            new_wallet_address = await generate_new_wallet()
            if new_wallet_address:
                user.wallet_address = new_wallet_address
                wallet = new_wallet_address
                await session.commit()
            else:
                await callback.message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∞–¥—Ä–µ—Å –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                return
        top_up_text = (f"–î–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞, –ø–µ—Ä–µ–≤–µ–¥–∏—Ç–µ **USDT (–≤ —Å–µ—Ç–∏ TRC-20)** –Ω–∞ –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∞–¥—Ä–µ—Å:\n\n<code>{wallet}</code>\n\n"
                       "‚ö†Ô∏è **–í–Ω–∏–º–∞–Ω–∏–µ!** –û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Ç–æ–ª—å–∫–æ USDT –≤ —Å–µ—Ç–∏ TRC-20.")
        await callback.message.answer(top_up_text)

@dp.callback_query(OrderCallback.filter(F.action == "view"))
async def view_order_offers(callback: CallbackQuery, callback_data: OrderCallback):
    await callback.answer()
    async with async_session() as session:
        stmt = (select(Offer).where(Offer.order_id == callback_data.order_id)
                .options(joinedload(Offer.executor), joinedload(Offer.order)))
        result = await session.execute(stmt)
        offers = result.scalars().unique().all()
        if not offers:
            await callback.message.answer("–ù–∞ —ç—Ç–æ—Ç –∑–∞–∫–∞–∑ –ø–æ–∫–∞ –Ω–µ—Ç –æ—Ç–∫–ª–∏–∫–æ–≤.")
            return
        order_title = offers[0].order.title if offers else "..."
        await callback.message.answer(f"<b>–û—Ç–∫–ª–∏–∫–∏ –Ω–∞ –∑–∞–∫–∞–∑ ‚Ññ{callback_data.order_id} ('{order_title}'):</b>")
        for offer in offers:
            executor = offer.executor
            executor_username = f"@{executor.username}" if executor.username else "–°–∫—Ä—ã—Ç"
            text = (f"<b>–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å:</b> {executor_username}\n<b>–†–µ–π—Ç–∏–Ω–≥:</b> {executor.rating:.2f} ‚≠ê ({executor.reviews_count} –æ—Ç–∑—ã–≤–æ–≤)\n\n"
                    f"<b>–°–æ–æ–±—â–µ–Ω–∏–µ:</b> ¬´<i>{offer.message}</i>¬ª")
            keyboard = types.InlineKeyboardMarkup(inline_keyboard=[[types.InlineKeyboardButton(
                text="–í—ã–±—Ä–∞—Ç—å —ç—Ç–æ–≥–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è", callback_data=OfferCallback(action="select", offer_id=offer.id).pack())]])
            await callback.message.answer(text, reply_markup=keyboard)

@dp.callback_query(OfferCallback.filter(F.action == "select"))
async def select_executor(callback: CallbackQuery, callback_data: OfferCallback):
    async with async_session() as session:
        offer = await session.get(Offer, callback_data.offer_id, options=[joinedload(Offer.order)])
        if not offer or not offer.order:
            await callback.answer("–û—à–∏–±–∫–∞: –æ—Ç–∫–ª–∏–∫ –∏–ª–∏ –∑–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
            return
        order = offer.order
        if order.customer_id != callback.from_user.id:
            await callback.answer("–≠—Ç–æ –Ω–µ –≤–∞—à –∑–∞–∫–∞–∑.", show_alert=True)
            return
        if order.status != "open":
            await callback.answer("–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –¥–ª—è —ç—Ç–æ–≥–æ –∑–∞–∫–∞–∑–∞ —É–∂–µ –≤—ã–±—Ä–∞–Ω.", show_alert=True)
            return
        order.status = "in_progress"
        order.executor_id = offer.executor_id
        await session.commit()
        await callback.message.edit_text(f"‚úÖ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –≤—ã–±—Ä–∞–Ω –¥–ª—è –∑–∞–∫–∞–∑–∞ ‚Ññ{order.id}!")
        try:
            await bot.send_message(offer.executor_id, f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í–∞—Å –≤—ã–±—Ä–∞–ª–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–º –¥–ª—è –∑–∞–∫–∞–∑–∞ ‚Ññ{order.id} ('{order.title}'). –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –æ–±—â–∞—Ç—å—Å—è —Å –∑–∞–∫–∞–∑—á–∏–∫–æ–º —á–µ—Ä–µ–∑ —ç—Ç–æ—Ç —á–∞—Ç.")
            await callback.message.answer(f"–í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ —Å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–º —á–µ—Ä–µ–∑ —ç—Ç–æ—Ç —á–∞—Ç. –í–∞—à–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –±—É–¥—É—Ç –ø–µ—Ä–µ—Å—ã–ª–∞—Ç—å—Å—è –µ–º—É.")
        except Exception as e:
            logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è {offer.executor_id}: {e}")

@dp.callback_query(OrderCallback.filter(F.action == "submit_work"))
async def submit_work(callback: CallbackQuery, callback_data: OrderCallback):
    async with async_session() as session:
        order = await session.get(Order, callback_data.order_id)
        if not order or order.executor_id != callback.from_user.id:
            await callback.answer("–≠—Ç–æ –Ω–µ –≤–∞—à –∑–∞–∫–∞–∑.", show_alert=True)
            return
        if order.status != "in_progress":
            await callback.answer("–≠—Ç–æ—Ç –∑–∞–∫–∞–∑ –Ω–µ –≤ —Ä–∞–±–æ—Ç–µ.", show_alert=True)
            return
        order.status = "pending_approval"
        await session.commit()
        await callback.message.edit_text("–í—ã —Å–¥–∞–ª–∏ —Ä–∞–±–æ—Ç—É. –û–∂–∏–¥–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç –∑–∞–∫–∞–∑—á–∏–∫–∞.")
        keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
            [types.InlineKeyboardButton(text="üëç –ü—Ä–∏–Ω—è—Ç—å —Ä–∞–±–æ—Ç—É", callback_data=OrderCallback(action="accept_work", order_id=order.id).pack())],
            [types.InlineKeyboardButton(text="‚õîÔ∏è –û—Ç–∫—Ä—ã—Ç—å —Å–ø–æ—Ä", callback_data=OrderCallback(action="dispute", order_id=order.id).pack())]])
        await bot.send_message(order.customer_id, f"üîî –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å —Å–¥–∞–ª —Ä–∞–±–æ—Ç—É –ø–æ –∑–∞–∫–∞–∑—É ‚Ññ{order.id} ('{order.title}').\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∏ –ø—Ä–∏–º–∏—Ç–µ —Ä–∞–±–æ—Ç—É.", reply_markup=keyboard)

@dp.callback_query(OrderCallback.filter(F.action == "accept_work"))
async def accept_work(callback: CallbackQuery, callback_data: OrderCallback):
    async with async_session() as session:
        order = await session.get(Order, callback_data.order_id, options=[joinedload(Order.executor)])
        
        if not order or order.customer_id != callback.from_user.id or order.status != "pending_approval":
            await callback.answer("–î–µ–π—Å—Ç–≤–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–æ.", show_alert=True)
            return
        
        # --- –†–∞—Å—á–µ—Ç –∏ —É–¥–µ—Ä–∂–∞–Ω–∏–µ –∫–æ–º–∏—Å—Å–∏–∏ ---
        executor = order.executor
        payout_amount = order.price
        commission_amount = Decimal("0.00")
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–∏—Å—Å–∏—é –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        commission_setting = await session.get(Setting, "commission_percent")
        if commission_setting and order.price > 0:
            commission_percent = Decimal(commission_setting.value)
            commission_amount = (order.price * commission_percent) / 100
            payout_amount = order.price - commission_amount

        # –ó–∞—á–∏—Å–ª—è–µ–º –¥–µ–Ω—å–≥–∏ –∏ –ª–æ–≥–∏—Ä—É–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
        if payout_amount > 0:
            executor.balance += payout_amount
            session.add(FinancialTransaction(user_id=executor.telegram_id, type='order_reward', amount=payout_amount, order_id=order.id))
        
        order.status = "completed"
        await session.commit()
        
        await callback.message.edit_text(f"‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–Ω—è–ª–∏ —Ä–∞–±–æ—Ç—É –ø–æ –∑–∞–∫–∞–∑—É ‚Ññ{order.id}! –°–¥–µ–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è —Å —É—á–µ—Ç–æ–º –∫–æ–º–∏—Å—Å–∏–∏
        payout_info = f"{payout_amount:.2f} USDT –∑–∞—á–∏—Å–ª–µ–Ω—ã –Ω–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å."
        if commission_amount > 0:
            payout_info += f" (—É–¥–µ—Ä–∂–∞–Ω–∞ –∫–æ–º–∏—Å—Å–∏—è {commission_amount:.2f} USDT)"

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –æ—Ç–∑—ã–≤–∞
        customer_review_kb = types.InlineKeyboardMarkup(inline_keyboard=[[
            types.InlineKeyboardButton(text="–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é", 
                                       callback_data=ReviewCallback(action="start", order_id=order.id, reviewee_id=order.executor_id).pack())
        ]])
        executor_review_kb = types.InlineKeyboardMarkup(inline_keyboard=[[
            types.InlineKeyboardButton(text="–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ –∑–∞–∫–∞–∑—á–∏–∫—É", 
                                       callback_data=ReviewCallback(action="start", order_id=order.id, reviewee_id=order.customer_id).pack())
        ]])

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤
        await bot.send_message(
            order.executor_id,
            f"üéâ –ó–∞–∫–∞–∑—á–∏–∫ –ø—Ä–∏–Ω—è–ª —Ä–∞–±–æ—Ç—É –ø–æ –∑–∞–∫–∞–∑—É ‚Ññ{order.id} ('{order.title}').\n{payout_info}",
            reply_markup=executor_review_kb
        )
        await callback.message.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Å—Ç–∞–≤—å—Ç–µ –æ—Ç–∑—ã–≤ –æ —Ä–∞–±–æ—Ç–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è.", reply_markup=customer_review_kb)
        
# --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –†–ï–ê–õ–ò–ó–£–ï–ú –õ–û–ì–ò–ö–£ –ö–ù–û–ü–ö–ò "–û–¢–ö–†–´–¢–¨ –°–ü–û–†" ---
@dp.callback_query(OrderCallback.filter(F.action == "dispute"))
async def open_dispute(callback: CallbackQuery, callback_data: OrderCallback):
    async with async_session() as session:
        order = await session.get(Order, callback_data.order_id)
        # ... (–ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–∫–∞–∑–∞ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
        if not order or order.customer_id != callback.from_user.id:
            await callback.answer("–≠—Ç–æ –Ω–µ –≤–∞—à –∑–∞–∫–∞–∑.", show_alert=True)
            return
        if order.status not in ["pending_approval", "in_progress"]:
            await callback.answer("–°–ø–æ—Ä –ø–æ —ç—Ç–æ–º—É –∑–∞–∫–∞–∑—É —É–∂–µ –Ω–µ–ª—å–∑—è –æ—Ç–∫—Ä—ã—Ç—å.", show_alert=True)
            return
        
        order.status = "dispute"
        await session.commit()

        await callback.message.edit_text(f"–í—ã –æ—Ç–∫—Ä—ã–ª–∏ —Å–ø–æ—Ä –ø–æ –∑–∞–∫–∞–∑—É ‚Ññ{callback_data.order_id}. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏.")
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π
        log_keyboard = types.InlineKeyboardMarkup(inline_keyboard=[[
            types.InlineKeyboardButton(text="üìú –ü–æ–ª—É—á–∏—Ç—å –ª–æ–≥ —á–∞—Ç–∞", callback_data=OrderCallback(action="get_log", order_id=order.id).pack())
        ]])
        
        try:
            await bot.send_message(ADMIN_ID, f"‚ö†Ô∏è <b>–ù–æ–≤—ã–π —Å–ø–æ—Ä!</b>\n–ó–∞–∫–∞–∑ ‚Ññ{order.id}: {order.title}\n\n"
                                             f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /dispute_info {order.id} –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π.", reply_markup=log_keyboard)
            if order.executor_id:
                await bot.send_message(order.executor_id, f"üî¥ –ó–∞–∫–∞–∑—á–∏–∫ –æ—Ç–∫—Ä—ã–ª —Å–ø–æ—Ä –ø–æ –∑–∞–∫–∞–∑—É ‚Ññ{order.id} ('{order.title}').\n"
                                                         "–û–∂–∏–¥–∞–π—Ç–µ —Ä–µ—à–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        except Exception as e:
            logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–ø–æ—Ä–µ –ø–æ –∑–∞–∫–∞–∑—É {order.id}: {e}")


# --- –ù–û–í–´–ï –ö–û–ú–ê–ù–î–´ –î–õ–Ø –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–ê ---

@dp.message(Command("set_commission"))
@admin_only
async def set_commission(message: types.Message, command: CommandObject):
    if not command.args:
        return await message.answer("–£–∫–∞–∂–∏—Ç–µ –ø—Ä–æ—Ü–µ–Ω—Ç –∫–æ–º–∏—Å—Å–∏–∏. –ü—Ä–∏–º–µ—Ä: /set_commission 5")
    try:
        percent = Decimal(command.args)
        if not (0 <= percent <= 100):
            raise ValueError
    except Exception:
        return await message.answer("–û—à–∏–±–∫–∞. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 100.")

    async with async_session() as session:
        # –ò—â–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É, –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é
        commission_setting = await session.get(Setting, "commission_percent")
        if not commission_setting:
            commission_setting = Setting(key="commission_percent", value=str(percent))
            session.add(commission_setting)
        else:
            commission_setting.value = str(percent)
        
        await session.commit()
    await message.answer(f"‚úÖ –ù–æ–≤–∞—è –∫–æ–º–∏—Å—Å–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {percent}%")

@dp.message(Command("dispute_info"))
@admin_only
async def get_dispute_info(message: types.Message, command: CommandObject):
    # –¢–µ–ø–µ—Ä—å —ç—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ –∫—Ä–∞—Ç–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    # ... (–∫–æ–¥ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    if not command.args:
        return await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ ID –∑–∞–∫–∞–∑–∞. –ü—Ä–∏–º–µ—Ä: /dispute_info 123")
    try:
        order_id = int(command.args)
    except ValueError:
        return await message.answer("ID –∑–∞–∫–∞–∑–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
    async with async_session() as session:
        order = await session.get(Order, order_id, options=[joinedload(Order.customer), joinedload(Order.executor)])
        if not order: return await message.answer(f"–ó–∞–∫–∞–∑ —Å ID {order_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        customer_username = f"@{order.customer.username}" if order.customer.username else "N/A"
        executor_username = f"@{order.executor.username}" if order.executor and order.executor.username else "N/A"
        info_text = (f"<b>‚ÑπÔ∏è –ò–Ω—Ñ–æ –ø–æ —Å–ø–æ—Ä—É (–ó–∞–∫–∞–∑ ‚Ññ{order.id})</b>\n\n"
                     f"<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {order.title}\n<b>–¶–µ–Ω–∞:</b> {order.price:.2f} USDT\n<b>–°—Ç–∞—Ç—É—Å:</b> {order.status}\n"
                     f"<b>–ó–∞–∫–∞–∑—á–∏–∫:</b> {customer_username} (ID: {order.customer_id})\n<b>–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å:</b> {executor_username} (ID: {order.executor_id})\n\n"
                     f"–ß—Ç–æ–±—ã —Ä–µ—à–∏—Ç—å —Å–ø–æ—Ä, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /resolve {order.id} customer|executor")
        await message.answer(info_text)

# –ù–û–í–´–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö –î–õ–Ø –ö–ù–û–ü–ö–ò "–ü–û–õ–£–ß–ò–¢–¨ –õ–û–ì"
@dp.callback_query(OrderCallback.filter(F.action == "get_log"))
async def get_chat_log_handler(callback: CallbackQuery, callback_data: OrderCallback):
    if callback.from_user.id != ADMIN_ID:
        return await callback.answer("–≠—Ç–∞ –∫–Ω–æ–ø–∫–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", show_alert=True)
        
    order_id = callback_data.order_id
    await callback.answer(f"–û—Ç–ø—Ä–∞–≤–ª—è—é –ª–æ–≥ –∑–∞–∫–∞–∑–∞ ‚Ññ{order_id} –≤ –∫–∞–Ω–∞–ª...")
    
    async with async_session() as session:
        order = await session.get(Order, order_id, options=[joinedload(Order.customer), joinedload(Order.executor)])
        await bot.send_message(LOG_CHANNEL_ID, f"--- –õ–æ–≥ —á–∞—Ç–∞ –¥–ª—è –∑–∞–∫–∞–∑–∞ ‚Ññ{order_id}: {order.title} ---")
        
        # === –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –°—Ä–∞–∑—É –ø–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Å–ø–∏—Å–æ–∫ ===
        chat_log_result = await session.scalars(select(ChatMessage).where(ChatMessage.order_id == order_id).order_by(ChatMessage.timestamp))
        chat_log = chat_log_result.all()
        # =======================================================
        
        if not chat_log:
             await bot.send_message(LOG_CHANNEL_ID, "–õ–æ–≥ —á–∞—Ç–∞ –ø—É—Å—Ç.")
             await callback.message.answer(f"‚úÖ –õ–æ–≥ —á–∞—Ç–∞ –¥–ª—è –∑–∞–∫–∞–∑–∞ ‚Ññ{order_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –∫–∞–Ω–∞–ª (–æ–Ω –ø—É—Å—Ç).")
             return

        for msg in chat_log:
            sender_role = "–ó–∞–∫–∞–∑—á–∏–∫" if msg.sender_id == order.customer_id else "–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å"
            timestamp = msg.timestamp.strftime('%Y-%m-%d %H:%M')
            caption = f"<i>[{timestamp}]</i> <b>{sender_role}:</b>"
            
            if msg.content_type == 'text':
                await bot.send_message(LOG_CHANNEL_ID, f"{caption} {msg.text_content}")
            elif msg.content_type == 'photo':
                await bot.send_photo(LOG_CHANNEL_ID, msg.file_id, caption=caption)
            elif msg.content_type == 'voice':
                await bot.send_voice(LOG_CHANNEL_ID, msg.file_id, caption=caption)

    await callback.message.answer(f"‚úÖ –õ–æ–≥ —á–∞—Ç–∞ –¥–ª—è –∑–∞–∫–∞–∑–∞ ‚Ññ{order_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –∫–∞–Ω–∞–ª.")



@dp.message(Command("resolve"))
@admin_only
async def resolve_dispute(message: types.Message, command: CommandObject):
    args = (command.args or "").split()
    # === –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ú–ï–ù–Ø–ï–ú –¢–ï–ö–°–¢ –û–®–ò–ë–ö–ò ===
    if len(args) != 2:
        return await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /resolve `id_–∑–∞–∫–∞–∑–∞` `winner`\n"
                                    "–ì–¥–µ `winner` - 'customer' –∏–ª–∏ 'executor'.")
    
    try:
        order_id = int(args[0])
        winner = args[1].lower()
        if winner not in ["customer", "executor"]:
            raise ValueError
    except ValueError:
        return await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã. –ü—Ä–∏–º–µ—Ä: /resolve 123 customer")

    async with async_session() as session:
        order = await session.get(Order, order_id, options=[joinedload(Order.customer), joinedload(Order.executor)])
        if not order:
            return await message.answer(f"–ó–∞–∫–∞–∑ —Å ID {order_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        if order.status != "dispute":
            return await message.answer(f"–ó–∞–∫–∞–∑ ‚Ññ{order_id} –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å—Ç–∞—Ç—É—Å–µ —Å–ø–æ—Ä–∞.")

        if winner == "customer":
            if order.price > 0: order.customer.balance += order.price
            session.add(FinancialTransaction(user_id=order.customer_id, type='dispute_resolution', amount=order.price, order_id=order.id))
            
            winner_user = order.customer
            loser_user = order.executor
            resolution_text = f"–°–ø–æ—Ä –ø–æ –∑–∞–∫–∞–∑—É ‚Ññ{order.id} —Ä–µ—à–µ–Ω –≤ –ø–æ–ª—å–∑—É –∑–∞–∫–∞–∑—á–∏–∫–∞. –°—É–º–º–∞ {order.price:.2f} USDT –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∞ –Ω–∞ –µ–≥–æ –±–∞–ª–∞–Ω—Å."
        else: # winner == "executor"
            if order.price > 0: order.executor.balance += order.price
            session.add(FinancialTransaction(user_id=order.executor_id, type='dispute_resolution', amount=order.price, order_id=order.id))
            
            winner_user = order.executor
            loser_user = order.customer
            resolution_text = f"–°–ø–æ—Ä –ø–æ –∑–∞–∫–∞–∑—É ‚Ññ{order.id} —Ä–µ—à–µ–Ω –≤ –ø–æ–ª—å–∑—É –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è. –°—É–º–º–∞ {order.price:.2f} USDT –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–∞ –Ω–∞ –µ–≥–æ –±–∞–ª–∞–Ω—Å."
            
        order.status = "completed"
        await session.commit()
        
        await message.answer(f"‚úÖ –°–ø–æ—Ä —É—Å–ø–µ—à–Ω–æ —Ä–µ—à–µ–Ω.\n{resolution_text}")
        
        try:
            await bot.send_message(winner_user.telegram_id, f"üü¢ {resolution_text}")
            if loser_user: await bot.send_message(loser_user.telegram_id, f"üî¥ {resolution_text}")
        except Exception as e:
            logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ä–µ—à–µ–Ω–∏–∏ —Å–ø–æ—Ä–∞ –ø–æ –∑–∞–∫–∞–∑—É {order.id}: {e}")

@dp.message(F.document)
@block_check
async def handle_document_rejection(message: types.Message, state: FSMContext):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –∞–∫—Ç–∏–≤–Ω–æ–º —á–∞—Ç–µ
    if await state.get_state() is not None: return # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ FSM
    user_id = message.from_user.id
    async with async_session() as session:
        active_order = await session.scalar(
            select(Order).where(Order.status == 'in_progress', or_(Order.customer_id == user_id, Order.executor_id == user_id))
        )
        if active_order:
            await message.reply("‚ùå –§–∞–π–ª—ã –¥–æ–ª–∂–Ω—ã –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ —Ñ–∞–π–ª–æ–æ–±–º–µ–Ω–Ω–∏–∫. –í —ç—Ç–æ–º —á–∞—Ç–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ç–æ–ª—å–∫–æ —Å—Å—ã–ª–∫–∏.")


# --- –û–ë–†–ê–ë–û–¢–ß–ò–ö –î–õ–Ø –ß–ê–¢–ê (–î–û–õ–ñ–ï–ù –ë–´–¢–¨ –í –°–ê–ú–û–ú –ö–û–ù–¶–ï!) ---
@dp.message(F.text | F.photo | F.voice)
@block_check
async def handle_chat_messages(message: types.Message, state: FSMContext):
    if await state.get_state() is not None:
        if message.content_type != types.ContentType.TEXT: return
        if message.text in ["üìù –°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑", "üìÇ –ú–æ–∏ –∑–∞–∫–∞–∑—ã", "üî• –õ–µ–Ω—Ç–∞ –∑–∞–∫–∞–∑–æ–≤", "üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å", "üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞"]: return
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∑–∞–≤–µ—Ä—à–∏—Ç–µ —Ç–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ –µ–≥–æ –∫–æ–º–∞–Ω–¥–æ–π /cancel.")
        return

    user_id = message.from_user.id
    async with async_session() as session:
        active_order = await session.scalar(
            select(Order).where(Order.status == 'in_progress', or_(Order.customer_id == user_id, Order.executor_id == user_id))
        )
        if not active_order: return

        if user_id == active_order.customer_id:
            recipient_id, sender_prefix = active_order.executor_id, "<b>[–ó–∞–∫–∞–∑—á–∏–∫]:</b>"
        else:
            recipient_id, sender_prefix = active_order.customer_id, f"<b>[–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –ø–æ –∑–∞–∫–∞–∑—É ‚Ññ{active_order.id}]:</b>"
        
        content_type = message.content_type.value
        text_content, file_path_to_save = None, None
        
        # --- –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê –°–ö–ê–ß–ò–í–ê–ù–ò–Ø ---
        if message.text:
            text_content = message.text
        elif message.photo:
            file_id = message.photo[-1].file_id
            text_content = message.caption
            file_info = await bot.get_file(file_id)
            file_ext = file_info.file_path.split('.')[-1]
            file_path_to_save = f"media/{file_info.file_unique_id}.{file_ext}"
            await bot.download_file(file_info.file_path, file_path_to_save)
        elif message.voice:
            file_id = message.voice.file_id
            file_info = await bot.get_file(file_id)
            file_ext = file_info.file_path.split('.')[-1]
            file_path_to_save = f"media/{file_info.file_unique_id}.{file_ext}"
            await bot.download_file(file_info.file_path, file_path_to_save)
        # --------------------------------

        session.add(ChatMessage(order_id=active_order.id, sender_id=user_id, content_type=content_type, text_content=text_content, file_path=file_path_to_save))
        await session.commit()
        
        try:
            if content_type == 'text':
                await bot.send_message(recipient_id, f"{sender_prefix}\n{text_content}")
            elif content_type == 'photo':
                await bot.send_photo(recipient_id, file_id, caption=f"{sender_prefix}\n{text_content or ''}")
            elif content_type == 'voice':
                await bot.send_voice(recipient_id, file_id, caption=sender_prefix)
        except Exception as e:
            logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ—Å–ª–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_id} –∫ {recipient_id}: {e}")
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ—Å—Ç–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ.")

# --- –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ ---
async def main():
    if not all([ADMIN_ID, LOG_CHANNEL_ID, ORDER_CHANNEL_ID]):
        logging.critical("–û–¥–∏–Ω –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö ID (ADMIN_ID, LOG_CHANNEL_ID, ORDER_CHANNEL_ID) –Ω–µ —É–∫–∞–∑–∞–Ω—ã –≤ .env —Ñ–∞–π–ª–µ!")
        return
        
    await create_tables()
    scheduler = AsyncIOScheduler(timezone="Etc/GMT")
    scheduler.add_job(check_payments, 'interval', minutes=2)
    scheduler.start()
    
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –≤–µ–±—Ö—É–∫–∏ –∏ –∑–∞–ø—É—Å–∫–∞–µ–º polling
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)
    
    await engine.dispose()
    scheduler.shutdown()

if __name__ == "__main__":
    print("–ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –∏ –ø—Ä–æ–≤–µ—Ä–∫—É –ø–ª–∞—Ç–µ–∂–µ–π...")
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        print("–†–∞–±–æ—Ç–∞ –±–æ—Ç–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")