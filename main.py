# --- –®–ê–ì 1: –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –≤ –ø–µ—Ä–≤—É—é –æ—á–µ—Ä–µ–¥—å ---
from dotenv import load_dotenv
load_dotenv()

# --- –®–ê–ì 2: –¢–µ–ø–µ—Ä—å –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω–æ–µ ---
import os
import asyncio
import logging
from decimal import Decimal

from aiogram import Bot, Dispatcher, types, F
from aiogram.client.default import DefaultBotProperties
from aiogram.filters import CommandStart, Command
from aiogram.filters.callback_data import CallbackData
from aiogram.types import CallbackQuery, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage

from sqlalchemy import select, update, func, or_
from sqlalchemy.orm import joinedload
from sqlalchemy.ext.asyncio import create_async_engine, async_sessionmaker

from apscheduler.schedulers.asyncio import AsyncIOScheduler

from db_models import Base, User, Transaction, Order, Offer, ChatMessage # –î–æ–±–∞–≤–∏–ª–∏ ChatMessage
from keyboards import main_menu_keyboard, balance_keyboard
from crypto_logic import generate_new_wallet, check_new_transactions
from states import OrderCreation, MakeOffer # –î–æ–±–∞–≤–∏–ª–∏ MakeOffer

# ... (–≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–æ —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤ –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
logging.basicConfig(level=logging.INFO)
DB_URL = f"postgresql+asyncpg://{os.getenv('DB_USER')}:{os.getenv('DB_PASS')}@{os.getenv('DB_HOST')}:{os.getenv('DB_PORT')}/{os.getenv('DB_NAME')}"
engine = create_async_engine(DB_URL)
async_session = async_sessionmaker(engine, expire_on_commit=False)
storage = MemoryStorage()
BOT_TOKEN = os.getenv("BOT_TOKEN")
bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode="HTML"))
dp = Dispatcher(storage=storage)

class OrderCallback(CallbackData, prefix="order"):
    action: str
    order_id: int

class OfferCallback(CallbackData, prefix="offer"):
    action: str
    offer_id: int

async def create_tables():
    async with engine.begin() as conn:
        await conn.run_sync(Base.metadata.create_all)

async def check_payments():
    # ... (–∫–æ–¥ check_payments –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    async with async_session() as session:
        users_with_wallets = await session.execute(select(User).where(User.wallet_address.isnot(None)))
        for user in users_with_wallets.scalars().all():
            new_transactions = await check_new_transactions(user.wallet_address)
            for tx in new_transactions:
                existing_tx = await session.execute(select(Transaction).where(Transaction.txid == tx['txid']))
                if existing_tx.scalar_one_or_none(): continue
                user.balance += tx['amount']
                new_tx_record = Transaction(txid=tx['txid'])
                session.add(new_tx_record)
                try:
                    await bot.send_message(user.telegram_id, f"‚úÖ –í–∞—à –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ <b>{tx['amount']:.2f} USDT</b>!")
                except Exception as e:
                    logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.telegram_id}: {e}")
        await session.commit()


# --- –•–µ–Ω–¥–ª–µ—Ä—ã ---
# ... (handle_start, cancel_handler, –∏ –≤—Å—è FSM –¥–ª—è order_creation –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
@dp.message(CommandStart())
async def handle_start(message: types.Message, state: FSMContext):
    await state.clear()
    async with async_session() as session:
        stmt = select(User).where(User.telegram_id == message.from_user.id)
        result = await session.execute(stmt)
        user = result.scalar_one_or_none()
        welcome_text = ""
        if user:
            welcome_text = f"–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {message.from_user.first_name}!"
        else:
            new_user = User(telegram_id=message.from_user.id, username=message.from_user.username)
            session.add(new_user)
            await session.commit()
            welcome_text = f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {message.from_user.first_name}! –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã."
        await message.answer(welcome_text, reply_markup=main_menu_keyboard)

@dp.message(Command("cancel"))
@dp.message(F.text.casefold() == "–æ—Ç–º–µ–Ω–∞")
async def cancel_handler(message: types.Message, state: FSMContext) -> None:
    current_state = await state.get_state()
    if current_state is None:
        return
    await state.clear()
    await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=main_menu_keyboard)

@dp.message(F.text == "üìù –°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑")
async def order_creation_start(message: types.Message, state: FSMContext):
    await state.set_state(OrderCreation.enter_title)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞. –ù–∞–ø—Ä–∏–º–µ—Ä, '–†–∞–∑—Ä–∞–±–æ—Ç–∞—Ç—å –ª–æ–≥–æ—Ç–∏–ø'.\n\n–î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ /cancel")

@dp.message(OrderCreation.enter_title)
async def enter_title(message: types.Message, state: FSMContext):
    await state.update_data(title=message.text)
    await state.set_state(OrderCreation.enter_description)
    await message.answer("–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏.")

@dp.message(OrderCreation.enter_description)
async def enter_description(message: types.Message, state: FSMContext):
    await state.update_data(description=message.text)
    await state.set_state(OrderCreation.enter_price)
    await message.answer("–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ —Ü–µ–Ω—É –∑–∞–∫–∞–∑–∞ –≤ USDT. –ù–∞–ø—Ä–∏–º–µ—Ä: 50.5")

@dp.message(OrderCreation.enter_price)
async def enter_price(message: types.Message, state: FSMContext):
    try:
        price = Decimal(message.text)
        if price < 0:
            await message.answer("–¶–µ–Ω–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            return
    except Exception:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ü–µ–Ω—ã. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ. –ù–∞–ø—Ä–∏–º–µ—Ä: 50.5")
        return
    await state.update_data(price=price)
    order_data = await state.get_data()
    async with async_session() as session:
        stmt = select(User).where(User.telegram_id == message.from_user.id)
        result = await session.execute(stmt)
        user = result.scalar_one_or_none()
        if not user or (price > 0 and user.balance < price):
            balance = user.balance if user else Decimal("0.00")
            await message.answer(f"–ù–∞ –≤–∞—à–µ–º –±–∞–ª–∞–Ω—Å–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ ({balance:.2f} USDT). –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", reply_markup=main_menu_keyboard)
            await state.clear()
            return
    text = (f"<b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞:</b>\n\n<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {order_data['title']}\n<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {order_data['description']}\n<b>–¶–µ–Ω–∞:</b> {price:.2f} USDT\n\n"
            "–ù–∞–∂–º–∏—Ç–µ '‚úÖ –°–æ–∑–¥–∞—Ç—å', —á—Ç–æ–±—ã —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –∑–∞–∫–∞–∑. –° –≤–∞—à–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞ –±—É–¥–µ—Ç –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–∞—è —Å—É–º–º–∞.")
    confirm_keyboard = types.InlineKeyboardMarkup(inline_keyboard=[[types.InlineKeyboardButton(text="‚úÖ –°–æ–∑–¥–∞—Ç—å", callback_data="order_confirm")], [types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="order_cancel")]])
    await state.set_state(OrderCreation.confirm_order)
    await message.answer(text, reply_markup=confirm_keyboard)

@dp.callback_query(OrderCreation.confirm_order, F.data == "order_confirm")
async def confirm_order_creation(callback: CallbackQuery, state: FSMContext):
    await callback.answer("–°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑...")
    order_data = await state.get_data()
    async with async_session() as session:
        price = order_data['price']
        stmt = select(User).where(User.telegram_id == callback.from_user.id)
        result = await session.execute(stmt)
        user = result.scalar_one_or_none()
        if not user or (price > 0 and user.balance < price):
            await callback.message.edit_text("–û—à–∏–±–∫–∞! –ù–∞ –≤–∞—à–µ–º –±–∞–ª–∞–Ω—Å–µ –±–æ–ª—å—à–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤.")
            await state.clear()
            return
        if price > 0:
            user.balance -= price
        new_order = Order(title=order_data['title'], description=order_data['description'], price=price, customer_id=callback.from_user.id)
        session.add(new_order)
        await session.commit()
        await callback.message.edit_text(f"‚úÖ –í–∞—à –∑–∞–∫–∞–∑ ‚Ññ{new_order.id} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!", reply_markup=None)
    await state.clear()

@dp.callback_query(OrderCreation.confirm_order, F.data == "order_cancel")
async def cancel_order_creation(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await state.clear()
    await callback.message.edit_text("–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=None)


# --- –õ–ï–ù–¢–ê –ó–ê–ö–ê–ó–û–í (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
@dp.message(Command("feed"))
async def handle_order_feed(message: types.Message):
    # ... (–∫–æ–¥ handle_order_feed –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
    async with async_session() as session:
        stmt = (select(Order).where(Order.status == "open", Order.customer_id != message.from_user.id)
                .options(joinedload(Order.customer)).order_by(Order.creation_date.desc()))
        result = await session.execute(stmt)
        orders = result.scalars().all()
        if not orders:
            await message.answer("–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤. –ó–∞–≥–ª—è–Ω–∏—Ç–µ –ø–æ–∑–∂–µ!")
            return
        await message.answer("<b>üî• –î–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–∫–∞–∑—ã:</b>")
        for order in orders:
            keyboard = types.InlineKeyboardMarkup(inline_keyboard=[[types.InlineKeyboardButton(text="üöÄ –û—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è", callback_data=OrderCallback(action="offer", order_id=order.id).pack())]])
            customer_username = f"@{order.customer.username}" if order.customer.username else "–°–∫—Ä—ã—Ç"
            order_text = (f"<b>–ó–∞–∫–∞–∑ ‚Ññ{order.id}</b> | {order.title}\n<b>–¶–µ–Ω–∞:</b> {order.price:.2f} USDT\n<b>–ó–∞–∫–∞–∑—á–∏–∫:</b> {customer_username}\n\n<i>{order.description[:150]}...</i>")
            await message.answer(order_text, reply_markup=keyboard)


# --- –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê –û–¢–ö–õ–ò–ö–ê –ù–ê –ó–ê–ö–ê–ó (FSM) ---
@dp.callback_query(OrderCallback.filter(F.action == "offer"))
async def handle_make_offer_start(callback: CallbackQuery, callback_data: OrderCallback, state: FSMContext):
    async with async_session() as session:
        existing_offer = await session.execute(
            select(Offer).where(Offer.order_id == callback_data.order_id, Offer.executor_id == callback.from_user.id)
        )
        if existing_offer.scalar_one_or_none():
            await callback.answer("–í—ã —É–∂–µ –æ—Ç–∫–ª–∏–∫–∞–ª–∏—Å—å –Ω–∞ —ç—Ç–æ—Ç –∑–∞–∫–∞–∑.", show_alert=True)
            return

    await state.set_state(MakeOffer.enter_message)
    await state.update_data(order_id=callback_data.order_id)
    await callback.answer()
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∑–∞–∫–∞–∑—á–∏–∫–∞:")

@dp.message(MakeOffer.enter_message)
async def handle_offer_message(message: types.Message, state: FSMContext):
    data = await state.get_data()
    order_id = data.get("order_id")
    
    async with async_session() as session:
        new_offer = Offer(
            order_id=order_id,
            executor_id=message.from_user.id,
            message=message.text
        )
        session.add(new_offer)
        order = await session.get(Order, order_id)
        
        if order:
            await session.commit()
            await message.answer("‚úÖ –í–∞—à –æ—Ç–∫–ª–∏–∫ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
            try:
                await bot.send_message(order.customer_id, f"üîî –ü–æ –≤–∞—à–µ–º—É –∑–∞–∫–∞–∑—É ‚Ññ{order.id} ('{order.title}') –Ω–æ–≤—ã–π –æ—Ç–∫–ª–∏–∫!")
            except Exception as e:
                logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –∑–∞–∫–∞–∑—á–∏–∫–∞ {order.customer_id} –æ –Ω–æ–≤–æ–º –æ—Ç–∫–ª–∏–∫–µ: {e}")
        else:
            await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.")

    await state.clear()


# --- –ú–û–ò –ó–ê–ö–ê–ó–´ (–ª–æ–≥–∏–∫–∞ –¥–ª—è –∑–∞–∫–∞–∑—á–∏–∫–∞, –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
@dp.message(F.text == "üìÇ –ú–æ–∏ –∑–∞–∫–∞–∑—ã")
async def handle_my_orders(message: types.Message):
    # ... (–∫–æ–¥ handle_my_orders –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
    async with async_session() as session:
        stmt = (select(Order).where(Order.customer_id == message.from_user.id)
                .order_by(Order.status.desc(), Order.creation_date.desc()))
        result = await session.execute(stmt)
        my_orders = result.scalars().all()
        if not my_orders:
            await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤. –ß—Ç–æ–±—ã –Ω–∞–π—Ç–∏ —Ä–∞–±–æ—Ç—É, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /feed")
            return
        await message.answer("<b>üóÇÔ∏è –í–∞—à–∏ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã:</b>")
        for order in my_orders:
            offers_count_stmt = select(func.count(Offer.id)).where(Offer.order_id == order.id)
            offers_count = await session.scalar(offers_count_stmt)
            status_emoji = {"open": "üü¢", "in_progress": "üü°", "completed": "‚ö™Ô∏è", "dispute": "üî¥"}
            text = (f"{status_emoji.get(order.status, '')} <b>–ó–∞–∫–∞–∑ ‚Ññ{order.id}:</b> {order.title}\n<b>–°—Ç–∞—Ç—É—Å:</b> {order.status} | <b>–û—Ç–∫–ª–∏–∫–æ–≤:</b> {offers_count}")
            keyboard = types.InlineKeyboardMarkup(inline_keyboard=[[types.InlineKeyboardButton(text="–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç–∫–ª–∏–∫–∏", callback_data=OrderCallback(action="view", order_id=order.id).pack())]])
            await message.answer(text, reply_markup=keyboard)


# --- –ü—Ä–æ—Å–º–æ—Ç—Ä –æ—Ç–∫–ª–∏–∫–æ–≤ (–æ—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ) ---
@dp.callback_query(OrderCallback.filter(F.action == "view"))
async def view_order_offers(callback: CallbackQuery, callback_data: OrderCallback):
    await callback.answer()
    async with async_session() as session:
        stmt = (
            select(Offer)
            .where(Offer.order_id == callback_data.order_id)
            .options(joinedload(Offer.executor), joinedload(Offer.order))
        )
        result = await session.execute(stmt)
        offers = result.scalars().unique().all()

        if not offers:
            await callback.message.answer("–ù–∞ —ç—Ç–æ—Ç –∑–∞–∫–∞–∑ –ø–æ–∫–∞ –Ω–µ—Ç –æ—Ç–∫–ª–∏–∫–æ–≤.")
            return

        order_title = offers[0].order.title if offers else "..."
        await callback.message.answer(f"<b>–û—Ç–∫–ª–∏–∫–∏ –Ω–∞ –∑–∞–∫–∞–∑ ‚Ññ{callback_data.order_id} ('{order_title}'):</b>")
        for offer in offers:
            executor = offer.executor
            executor_username = f"@{executor.username}" if executor.username else "–°–∫—Ä—ã—Ç"
            text = (
                f"<b>–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å:</b> {executor_username}\n"
                f"<b>–†–µ–π—Ç–∏–Ω–≥:</b> {executor.rating:.2f} ‚≠ê ({executor.reviews_count} –æ—Ç–∑—ã–≤–æ–≤)\n\n"
                f"<b>–°–æ–æ–±—â–µ–Ω–∏–µ:</b> ¬´<i>{offer.message}</i>¬ª"
            )
            keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
                [types.InlineKeyboardButton(
                    text="–í—ã–±—Ä–∞—Ç—å —ç—Ç–æ–≥–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è",
                    callback_data=OfferCallback(action="select", offer_id=offer.id).pack()
                )]
            ])
            await callback.message.answer(text, reply_markup=keyboard)


# --- –í—ã–±–æ—Ä –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
@dp.callback_query(OfferCallback.filter(F.action == "select"))
async def select_executor(callback: CallbackQuery, callback_data: OfferCallback):
    # ... (–∫–æ–¥ select_executor –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
    async with async_session() as session:
        offer = await session.get(Offer, callback_data.offer_id, options=[joinedload(Offer.order)])
        if not offer or not offer.order:
            await callback.answer("–û—à–∏–±–∫–∞: –æ—Ç–∫–ª–∏–∫ –∏–ª–∏ –∑–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
            return
        order = offer.order
        if order.customer_id != callback.from_user.id:
            await callback.answer("–≠—Ç–æ –Ω–µ –≤–∞—à –∑–∞–∫–∞–∑.", show_alert=True)
            return
        if order.status != "open":
            await callback.answer("–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –¥–ª—è —ç—Ç–æ–≥–æ –∑–∞–∫–∞–∑–∞ —É–∂–µ –≤—ã–±—Ä–∞–Ω.", show_alert=True)
            return
        order.status = "in_progress"
        order.executor_id = offer.executor_id
        await session.commit()
        await callback.message.edit_text(f"‚úÖ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –≤—ã–±—Ä–∞–Ω –¥–ª—è –∑–∞–∫–∞–∑–∞ ‚Ññ{order.id}!")
        try:
            await bot.send_message(offer.executor_id, f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í–∞—Å –≤—ã–±—Ä–∞–ª–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–º –¥–ª—è –∑–∞–∫–∞–∑–∞ ‚Ññ{order.id} ('{order.title}'). –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –æ–±—â–∞—Ç—å—Å—è —Å –∑–∞–∫–∞–∑—á–∏–∫–æ–º —á–µ—Ä–µ–∑ —ç—Ç–æ—Ç —á–∞—Ç.")
            await callback.message.answer(f"–í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ —Å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–º —á–µ—Ä–µ–∑ —ç—Ç–æ—Ç —á–∞—Ç. –í–∞—à–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –±—É–¥—É—Ç –ø–µ—Ä–µ—Å—ã–ª–∞—Ç—å—Å—è –µ–º—É.")
        except Exception as e:
            logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è {offer.executor_id}: {e}")

# --- –ù–û–í–´–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö –î–õ–Ø –ß–ê–¢–ê ---
@dp.message(F.text)
async def handle_chat_messages(message: types.Message, state: FSMContext):
    # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞/–æ—Ç–∫–ª–∏–∫–∞
    if await state.get_state() is not None:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∑–∞–≤–µ—Ä—à–∏—Ç–µ —Ç–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ (—Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –∏–ª–∏ –æ—Ç–∫–ª–∏–∫–∞) –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ –µ–≥–æ –∫–æ–º–∞–Ω–¥–æ–π /cancel.")
        return

    user_id = message.from_user.id
    async with async_session() as session:
        # –ò—â–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∑–∞–∫–∞–∑, –≥–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ª–∏–±–æ –∑–∞–∫–∞–∑—á–∏–∫, –ª–∏–±–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å
        stmt = select(Order).where(
            Order.status == 'in_progress',
            or_(Order.customer_id == user_id, Order.executor_id == user_id)
        )
        result = await session.execute(stmt)
        active_order = result.scalar_one_or_none()
        
        if not active_order:
            # –ï—Å–ª–∏ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞ –Ω–µ—Ç, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫
            # (aiogram 3 —Å–¥–µ–ª–∞–µ—Ç —ç—Ç–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏, –µ—Å–ª–∏ —ç—Ç–æ—Ç —Ö–µ–Ω–¥–ª–µ—Ä –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–µ—Ç)
            # –î–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏ –º–æ–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞—Ç—å
            return

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫—Ç–æ –ø–æ–ª—É—á–∞—Ç–µ–ª—å
        if user_id == active_order.customer_id:
            recipient_id = active_order.executor_id
            sender_prefix = "<b>[–ó–∞–∫–∞–∑—á–∏–∫]:</b>"
        else:
            recipient_id = active_order.customer_id
            sender_prefix = f"<b>[–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –ø–æ –∑–∞–∫–∞–∑—É ‚Ññ{active_order.id}]:</b>"
        
        # 1. –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –±–∞–∑—É
        new_chat_message = ChatMessage(
            order_id=active_order.id,
            sender_id=user_id,
            message_text=message.text
        )
        session.add(new_chat_message)
        await session.commit()
        
        # 2. –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—é
        try:
            await bot.send_message(recipient_id, f"{sender_prefix}\n{message.text}")
            await message.answer("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
        except Exception as e:
            logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ—Å–ª–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_id} –∫ {recipient_id}: {e}")
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ—Å—Ç–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ.")


# --- –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ö–µ–Ω–¥–ª–µ—Ä—ã (–±–∞–ª–∞–Ω—Å, –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ, –ø–æ–¥–¥–µ—Ä–∂–∫–∞) –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π ---
@dp.message(F.text == "üí∞ –ú–æ–π –±–∞–ª–∞–Ω—Å")
async def handle_balance(message: types.Message):
    async with async_session() as session:
        stmt = select(User).where(User.telegram_id == message.from_user.id)
        result = await session.execute(stmt)
        user = result.scalar_one_or_none()
        if user:
            balance_text = f"<b>–í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å:</b>\n<code>{user.balance:.2f} USDT</code>"
            await message.answer(balance_text, reply_markup=balance_keyboard)
        else:
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")

@dp.callback_query(F.data == "top_up")
async def handle_top_up(callback: CallbackQuery):
    await callback.answer()
    async with async_session() as session:
        stmt = select(User).where(User.telegram_id == callback.from_user.id)
        result = await session.execute(stmt)
        user = result.scalar_one_or_none()
        if not user:
            await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ /start.")
            return
        wallet = user.wallet_address
        if not wallet:
            new_wallet_address = await generate_new_wallet()
            if new_wallet_address:
                user.wallet_address = new_wallet_address
                wallet = new_wallet_address
                await session.commit()
            else:
                await callback.message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∞–¥—Ä–µ—Å –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                return
        top_up_text = (f"–î–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞, –ø–µ—Ä–µ–≤–µ–¥–∏—Ç–µ **USDT (–≤ —Å–µ—Ç–∏ TRC-20)** –Ω–∞ –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∞–¥—Ä–µ—Å:\n\n<code>{wallet}</code>\n\n"
                       "‚ö†Ô∏è **–í–Ω–∏–º–∞–Ω–∏–µ!** –û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Ç–æ–ª—å–∫–æ USDT –≤ —Å–µ—Ç–∏ TRC-20.")
        await callback.message.answer(top_up_text)

@dp.message(F.text == "üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞")
async def handle_support(message: types.Message):
    await message.answer("–í—ã –≤—ã–±—Ä–∞–ª–∏ '–ü–æ–¥–¥–µ—Ä–∂–∫–∞'. –≠—Ç–æ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.")


# --- –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ ---
async def main():
    await create_tables()
    scheduler = AsyncIOScheduler(timezone="Etc/GMT")
    scheduler.add_job(check_payments, 'interval', minutes=2)
    scheduler.start()
    await dp.start_polling(bot)
    await engine.dispose()
    scheduler.shutdown()

if __name__ == "__main__":
    print("–ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –∏ –ø—Ä–æ–≤–µ—Ä–∫—É –ø–ª–∞—Ç–µ–∂–µ–π...")
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("–†–∞–±–æ—Ç–∞ –±–æ—Ç–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")